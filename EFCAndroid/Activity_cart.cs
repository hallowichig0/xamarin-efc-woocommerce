using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using SupportToolbar = Android.Support.V7.Widget.Toolbar;
using Android.Support.V7.App;
using Android.Support.Design.Widget;
using Android.Support.V4.Widget;
using MySql.Data.MySqlClient;
using System.Threading;
using Square.Picasso;
using Android.Preferences;

namespace EFCAndroid
{
    [Activity(Label = "Activity_cart",/* MainLauncher = true,*/ Theme = "@style/Theme.DesignDemo")]
    public class Activity_cart : AppCompatActivity
    {
        private SupportToolbar mToolbar;
        private BottomNavigationView btm_nav;
        private ProgressBar progressbar;
        int progressValue = 0;

        private TextView txtQuantity_1, txtQuantity_2, txtQuantity_3, txtQuantity_4, txtQuantity_5, txtQuantity_6, txtQuantity_7, txtQuantity_8;
        private TextView base_price1, base_price2, base_price3, base_price4, base_price5, base_price6, base_price7, base_price8;

        private TextView txtQuantity_9, txtQuantity_10, txtQuantity_11, txtQuantity_12, txtQuantity_13, txtQuantity_14, txtQuantity_15, txtQuantity_16;
        private TextView base_price9, base_price10, base_price11, base_price12, base_price13, base_price14, base_price15, base_price16;

        private TextView txtQuantity_17, txtQuantity_18, txtQuantity_19, txtQuantity_20, txtQuantity_21, txtQuantity_22, txtQuantity_23, txtQuantity_24;
        private TextView base_price17, base_price18, base_price19, base_price20, base_price21, base_price22, base_price23, base_price24;

        private TextView txtQuantity_25, txtQuantity_26, txtQuantity_27, txtQuantity_28, txtQuantity_29, txtQuantity_30, txtQuantity_31, txtQuantity_32;
        private TextView base_price25, base_price26, base_price27, base_price28, base_price29, base_price30, base_price31, base_price32;

        // the rest product
        private TextView txtQuantity_33, txtQuantity_34, txtQuantity_35, txtQuantity_36, txtQuantity_37;
        private TextView base_price33, base_price34, base_price35, base_price36, base_price37;
        // beef
        private TextView txtQuantity_38, txtQuantity_39, txtQuantity_40, txtQuantity_41, txtQuantity_42;
        private TextView base_price38, base_price39, base_price40, base_price41, base_price42;
        // fish
        private TextView txtQuantity_43, txtQuantity_44, txtQuantity_45, txtQuantity_46;
        private TextView base_price43, base_price44, base_price45, base_price46;
        // vegan
        private TextView txtQuantity_47, txtQuantity_48, txtQuantity_49, txtQuantity_50, txtQuantity_51;
        private TextView base_price47, base_price48, base_price49, base_price50, base_price51;
        // pasta
        private TextView txtQuantity_52, txtQuantity_53, txtQuantity_54;
        private TextView base_price52, base_price53, base_price54;
        // sandwich
        private TextView txtQuantity_55, txtQuantity_56, txtQuantity_57;
        private TextView base_price55, base_price56, base_price57;
        // salad
        private TextView txtQuantity_58, txtQuantity_59, txtQuantity_60;
        private TextView base_price58, base_price59, base_price60;

        private ImageView imgview1, imgview2, imgview3, imgview4, imgview5, imgview6, imgview7, imgview8;
        private ImageView imgview9, imgview10, imgview11, imgview12, imgview13, imgview14, imgview15, imgview16;
        private ImageView imgview17, imgview18, imgview19, imgview20, imgview21, imgview22, imgview23, imgview24;
        private ImageView imgview25, imgview26, imgview27, imgview28, imgview29, imgview30, imgview31, imgview32;

        // the rest product
        private ImageView imgview33, imgview34, imgview35, imgview36, imgview37;
        // beef
        private ImageView imgview38, imgview39, imgview40, imgview41, imgview42;
        // fish
        private ImageView imgview43, imgview44, imgview45, imgview46;
        // vegan
        private ImageView imgview47, imgview48, imgview49, imgview50, imgview51;
        // pasta
        private ImageView imgview52, imgview53, imgview54;
        // sandwich
        private ImageView imgview55, imgview56, imgview57;
        // salad
        private ImageView imgview58, imgview59, imgview60;

        //Increment/Decrement Button
        private Button btn_increment_add1, btn_increment_minus1;
        private Button btn_increment_add2, btn_increment_minus2;
        private Button btn_increment_add3, btn_increment_minus3;
        private Button btn_increment_add4, btn_increment_minus4;
        private Button btn_increment_add5, btn_increment_minus5;
        private Button btn_increment_add6, btn_increment_minus6;
        private Button btn_increment_add7, btn_increment_minus7;
        private Button btn_increment_add8, btn_increment_minus8;

        private Button btn_increment_add9, btn_increment_minus9;
        private Button btn_increment_add10, btn_increment_minus10;
        private Button btn_increment_add11, btn_increment_minus11;
        private Button btn_increment_add12, btn_increment_minus12;
        private Button btn_increment_add13, btn_increment_minus13;
        private Button btn_increment_add14, btn_increment_minus14;
        private Button btn_increment_add15, btn_increment_minus15;
        private Button btn_increment_add16, btn_increment_minus16;

        private Button btn_increment_add17, btn_increment_minus17;
        private Button btn_increment_add18, btn_increment_minus18;
        private Button btn_increment_add19, btn_increment_minus19;
        private Button btn_increment_add20, btn_increment_minus20;
        private Button btn_increment_add21, btn_increment_minus21;
        private Button btn_increment_add22, btn_increment_minus22;
        private Button btn_increment_add23, btn_increment_minus23;
        private Button btn_increment_add24, btn_increment_minus24;

        private Button btn_increment_add25, btn_increment_minus25;
        private Button btn_increment_add26, btn_increment_minus26;
        private Button btn_increment_add27, btn_increment_minus27;
        private Button btn_increment_add28, btn_increment_minus28;
        private Button btn_increment_add29, btn_increment_minus29;
        private Button btn_increment_add30, btn_increment_minus30;
        private Button btn_increment_add31, btn_increment_minus31;
        private Button btn_increment_add32, btn_increment_minus32;

        // the rest product

        private Button btn_increment_add33, btn_increment_minus33;
        private Button btn_increment_add34, btn_increment_minus34;
        private Button btn_increment_add35, btn_increment_minus35;
        private Button btn_increment_add36, btn_increment_minus36;
        private Button btn_increment_add37, btn_increment_minus37;
        // beef
        private Button btn_increment_add38, btn_increment_minus38;
        private Button btn_increment_add39, btn_increment_minus39;
        private Button btn_increment_add40, btn_increment_minus40;
        private Button btn_increment_add41, btn_increment_minus41;
        private Button btn_increment_add42, btn_increment_minus42;
        // fish
        private Button btn_increment_add43, btn_increment_minus43;
        private Button btn_increment_add44, btn_increment_minus44;
        private Button btn_increment_add45, btn_increment_minus45;
        private Button btn_increment_add46, btn_increment_minus46;
        // vegan
        private Button btn_increment_add47, btn_increment_minus47;
        private Button btn_increment_add48, btn_increment_minus48;
        private Button btn_increment_add49, btn_increment_minus49;
        private Button btn_increment_add50, btn_increment_minus50;
        private Button btn_increment_add51, btn_increment_minus51;
        // pasta
        private Button btn_increment_add52, btn_increment_minus52;
        private Button btn_increment_add53, btn_increment_minus53;
        private Button btn_increment_add54, btn_increment_minus54;
        // sandwich
        private Button btn_increment_add55, btn_increment_minus55;
        private Button btn_increment_add56, btn_increment_minus56;
        private Button btn_increment_add57, btn_increment_minus57;
        // salad
        private Button btn_increment_add58, btn_increment_minus58;
        private Button btn_increment_add59, btn_increment_minus59;
        private Button btn_increment_add60, btn_increment_minus60;

        //Delete button
        private Button btndelete1, btndelete2, btndelete3, btndelete4, btndelete5, btndelete6, btndelete7, btndelete8;
        private Button btndelete9, btndelete10, btndelete11, btndelete12, btndelete13, btndelete14, btndelete15, btndelete16;
        private Button btndelete17, btndelete18, btndelete19, btndelete20, btndelete21, btndelete22, btndelete23, btndelete24;
        private Button btndelete25, btndelete26, btndelete27, btndelete28, btndelete29, btndelete30, btndelete31, btndelete32;

        // the rest product
        private Button btndelete33, btndelete34, btndelete35, btndelete36, btndelete37;
        // beef
        private Button btndelete38, btndelete39, btndelete40, btndelete41, btndelete42;
        // fish
        private Button btndelete43, btndelete44, btndelete45, btndelete46;
        // vegan
        private Button btndelete47, btndelete48, btndelete49, btndelete50, btndelete51;
        // pasta
        private Button btndelete52, btndelete53, btndelete54;
        // sandwich
        private Button btndelete55, btndelete56, btndelete57;
        // salad
        private Button btndelete58, btndelete59, btndelete60;

        private LinearLayout linear1, linear2, linear3, linear4, linear5, linear6, linear7, linear8;
        private LinearLayout linear9, linear10, linear11, linear12, linear13, linear14, linear15, linear16;
        private LinearLayout linear17, linear18, linear19, linear20, linear21, linear22, linear23, linear24;
        private LinearLayout linear25, linear26, linear27, linear28, linear29, linear30, linear31, linear32;

        // the rest product
        private LinearLayout linear33, linear34, linear35, linear36, linear37;
        // beef
        private LinearLayout linear38, linear39, linear40, linear41, linear42;
        // fish
        private LinearLayout linear43, linear44, linear45, linear46;
        // vegan
        private LinearLayout linear47, linear48, linear49, linear50, linear51;
        // pasta
        private LinearLayout linear52, linear53, linear54;
        // sandwich
        private LinearLayout linear55, linear56, linear57;
        // salad
        private LinearLayout linear58, linear59, linear60;

        int increment_int, increment_int2, increment_int3, increment_int4, increment_int5, increment_int6, increment_int7, increment_int8;
        int increment_int9, increment_int10, increment_int11, increment_int12, increment_int13, increment_int14, increment_int15, increment_int16;
        int increment_int17, increment_int18, increment_int19, increment_int20, increment_int21, increment_int22, increment_int23, increment_int24;
        int increment_int25, increment_int26, increment_int27, increment_int28, increment_int29, increment_int30, increment_int31, increment_int32;

        // the rest product
        int increment_int33, increment_int34, increment_int35, increment_int36, increment_int37;
        // beef
        int increment_int38, increment_int39, increment_int40, increment_int41, increment_int42;
        // fish
        int increment_int43, increment_int44, increment_int45, increment_int46;
        // vegan
        int increment_int47, increment_int48, increment_int49, increment_int50, increment_int51;
        // pasta
        int increment_int52, increment_int53, increment_int54;
        // sandwich
        int increment_int55, increment_int56, increment_int57;
        // salad
        int increment_int58, increment_int59, increment_int60;

        // SESSION VARIABLE
        string session_user = "";
        // SESSION VARIABLE

       

        protected override void OnCreate(Bundle savedInstanceState)
        {
            base.OnCreate(savedInstanceState);
            SetContentView(Resource.Layout.activity_cart);
            // Create your application here

            mToolbar = FindViewById<SupportToolbar>(Resource.Id.toolbar);

            SetSupportActionBar(mToolbar);
            SupportActionBar.Title = "CART";
            SupportActionBar.SetDisplayHomeAsUpEnabled(true);
            SupportActionBar.SetDisplayShowHomeEnabled(true);

            // CALLED SESSION VARIABLE
            ISharedPreferences prefs = PreferenceManager.GetDefaultSharedPreferences(this);
            session_user = prefs.GetString("myItem_User_ID", null);
            // CALLED SESSION VARIABLE

            btm_nav = FindViewById<BottomNavigationView>(Resource.Id.bottom_navigation);


            // total variable
            IMenu menu1 = btm_nav.Menu;

            IMenuItem nav_bottom_item = menu1.FindItem(Resource.Id.menu_total);
            //string jay = "jayson123";
            //nav_bottom_item.SetTitle(jay);

            // EFC CHICKEN TERIYAKI

            base_price1 = FindViewById<TextView>(Resource.Id.base_price1);
            txtQuantity_1 = FindViewById<TextView>(Resource.Id.qtyNum1);
            btn_increment_add1 = FindViewById<Button>(Resource.Id.buttonIncrementPlus1);
            btn_increment_minus1 = FindViewById<Button>(Resource.Id.buttonIncrementMinus1);
            btndelete1 = FindViewById<Button>(Resource.Id.buttonDelete1);
            imgview1 = FindViewById<ImageView>(Resource.Id.imageView1);

            base_price2 = FindViewById<TextView>(Resource.Id.base_price2);
            txtQuantity_2 = FindViewById<TextView>(Resource.Id.qtyNum2);
            btn_increment_add2 = FindViewById<Button>(Resource.Id.buttonIncrementPlus2);
            btn_increment_minus2 = FindViewById<Button>(Resource.Id.buttonIncrementMinus2);
            btndelete2 = FindViewById<Button>(Resource.Id.buttonDelete2);
            imgview2 = FindViewById<ImageView>(Resource.Id.imageView2);

            base_price3 = FindViewById<TextView>(Resource.Id.base_price3);
            txtQuantity_3 = FindViewById<TextView>(Resource.Id.qtyNum3);
            btn_increment_add3 = FindViewById<Button>(Resource.Id.buttonIncrementPlus3);
            btn_increment_minus3 = FindViewById<Button>(Resource.Id.buttonIncrementMinus3);
            btndelete3 = FindViewById<Button>(Resource.Id.buttonDelete3);
            imgview3 = FindViewById<ImageView>(Resource.Id.imageView3);

            base_price4 = FindViewById<TextView>(Resource.Id.base_price4);
            txtQuantity_4 = FindViewById<TextView>(Resource.Id.qtyNum4);
            btn_increment_add4 = FindViewById<Button>(Resource.Id.buttonIncrementPlus4);
            btn_increment_minus4 = FindViewById<Button>(Resource.Id.buttonIncrementMinus4);
            btndelete4 = FindViewById<Button>(Resource.Id.buttonDelete4);
            imgview4 = FindViewById<ImageView>(Resource.Id.imageView4);

            base_price5 = FindViewById<TextView>(Resource.Id.base_price5);
            txtQuantity_5 = FindViewById<TextView>(Resource.Id.qtyNum5);
            btn_increment_add5 = FindViewById<Button>(Resource.Id.buttonIncrementPlus5);
            btn_increment_minus5 = FindViewById<Button>(Resource.Id.buttonIncrementMinus5);
            btndelete5 = FindViewById<Button>(Resource.Id.buttonDelete5);
            imgview5 = FindViewById<ImageView>(Resource.Id.imageView5);

            base_price6 = FindViewById<TextView>(Resource.Id.base_price6);
            txtQuantity_6 = FindViewById<TextView>(Resource.Id.qtyNum6);
            btn_increment_add6 = FindViewById<Button>(Resource.Id.buttonIncrementPlus6);
            btn_increment_minus6 = FindViewById<Button>(Resource.Id.buttonIncrementMinus6);
            btndelete6 = FindViewById<Button>(Resource.Id.buttonDelete6);
            imgview6 = FindViewById<ImageView>(Resource.Id.imageView6);

            base_price7 = FindViewById<TextView>(Resource.Id.base_price7);
            txtQuantity_7 = FindViewById<TextView>(Resource.Id.qtyNum7);
            btn_increment_add7 = FindViewById<Button>(Resource.Id.buttonIncrementPlus7);
            btn_increment_minus7 = FindViewById<Button>(Resource.Id.buttonIncrementMinus7);
            btndelete7 = FindViewById<Button>(Resource.Id.buttonDelete7);
            imgview7 = FindViewById<ImageView>(Resource.Id.imageView7);

            base_price8 = FindViewById<TextView>(Resource.Id.base_price8);
            txtQuantity_8 = FindViewById<TextView>(Resource.Id.qtyNum8);
            btn_increment_add8 = FindViewById<Button>(Resource.Id.buttonIncrementPlus8);
            btn_increment_minus8 = FindViewById<Button>(Resource.Id.buttonIncrementMinus8);
            btndelete8 = FindViewById<Button>(Resource.Id.buttonDelete8);
            imgview8 = FindViewById<ImageView>(Resource.Id.imageView8);

            // EFC CHICKEN CURRY

            base_price9 = FindViewById<TextView>(Resource.Id.base_price9);
            txtQuantity_9 = FindViewById<TextView>(Resource.Id.qtyNum9);
            btn_increment_add9 = FindViewById<Button>(Resource.Id.buttonIncrementPlus9);
            btn_increment_minus9 = FindViewById<Button>(Resource.Id.buttonIncrementMinus9);
            btndelete9 = FindViewById<Button>(Resource.Id.buttonDelete9);
            imgview9 = FindViewById<ImageView>(Resource.Id.imageView9);

            base_price10 = FindViewById<TextView>(Resource.Id.base_price10);
            txtQuantity_10 = FindViewById<TextView>(Resource.Id.qtyNum10);
            btn_increment_add10 = FindViewById<Button>(Resource.Id.buttonIncrementPlus10);
            btn_increment_minus10 = FindViewById<Button>(Resource.Id.buttonIncrementMinus10);
            btndelete10 = FindViewById<Button>(Resource.Id.buttonDelete10);
            imgview10 = FindViewById<ImageView>(Resource.Id.imageView10);

            base_price11 = FindViewById<TextView>(Resource.Id.base_price11);
            txtQuantity_11 = FindViewById<TextView>(Resource.Id.qtyNum11);
            btn_increment_add11 = FindViewById<Button>(Resource.Id.buttonIncrementPlus11);
            btn_increment_minus11 = FindViewById<Button>(Resource.Id.buttonIncrementMinus11);
            btndelete11 = FindViewById<Button>(Resource.Id.buttonDelete11);
            imgview11 = FindViewById<ImageView>(Resource.Id.imageView11);

            base_price12 = FindViewById<TextView>(Resource.Id.base_price12);
            txtQuantity_12 = FindViewById<TextView>(Resource.Id.qtyNum12);
            btn_increment_add12 = FindViewById<Button>(Resource.Id.buttonIncrementPlus12);
            btn_increment_minus12 = FindViewById<Button>(Resource.Id.buttonIncrementMinus12);
            btndelete12 = FindViewById<Button>(Resource.Id.buttonDelete12);
            imgview12 = FindViewById<ImageView>(Resource.Id.imageView12);

            base_price13 = FindViewById<TextView>(Resource.Id.base_price13);
            txtQuantity_13 = FindViewById<TextView>(Resource.Id.qtyNum13);
            btn_increment_add13 = FindViewById<Button>(Resource.Id.buttonIncrementPlus13);
            btn_increment_minus13 = FindViewById<Button>(Resource.Id.buttonIncrementMinus13);
            btndelete13 = FindViewById<Button>(Resource.Id.buttonDelete13);
            imgview13 = FindViewById<ImageView>(Resource.Id.imageView13);

            base_price14 = FindViewById<TextView>(Resource.Id.base_price14);
            txtQuantity_14 = FindViewById<TextView>(Resource.Id.qtyNum14);
            btn_increment_add14 = FindViewById<Button>(Resource.Id.buttonIncrementPlus14);
            btn_increment_minus14 = FindViewById<Button>(Resource.Id.buttonIncrementMinus14);
            btndelete14 = FindViewById<Button>(Resource.Id.buttonDelete14);
            imgview14 = FindViewById<ImageView>(Resource.Id.imageView14);

            base_price15 = FindViewById<TextView>(Resource.Id.base_price15);
            txtQuantity_15 = FindViewById<TextView>(Resource.Id.qtyNum15);
            btn_increment_add15 = FindViewById<Button>(Resource.Id.buttonIncrementPlus15);
            btn_increment_minus15 = FindViewById<Button>(Resource.Id.buttonIncrementMinus15);
            btndelete15 = FindViewById<Button>(Resource.Id.buttonDelete15);
            imgview15 = FindViewById<ImageView>(Resource.Id.imageView15);

            base_price16 = FindViewById<TextView>(Resource.Id.base_price16);
            txtQuantity_16 = FindViewById<TextView>(Resource.Id.qtyNum16);
            btn_increment_add16 = FindViewById<Button>(Resource.Id.buttonIncrementPlus16);
            btn_increment_minus16 = FindViewById<Button>(Resource.Id.buttonIncrementMinus16);
            btndelete16 = FindViewById<Button>(Resource.Id.buttonDelete16);
            imgview16 = FindViewById<ImageView>(Resource.Id.imageView16);

            // EFC BEEF TERIYAKI

            base_price17 = FindViewById<TextView>(Resource.Id.base_price17);
            txtQuantity_17 = FindViewById<TextView>(Resource.Id.qtyNum17);
            btn_increment_add17 = FindViewById<Button>(Resource.Id.buttonIncrementPlus17);
            btn_increment_minus17 = FindViewById<Button>(Resource.Id.buttonIncrementMinus17);
            btndelete17 = FindViewById<Button>(Resource.Id.buttonDelete17);
            imgview17 = FindViewById<ImageView>(Resource.Id.imageView17);

            base_price18 = FindViewById<TextView>(Resource.Id.base_price18);
            txtQuantity_18 = FindViewById<TextView>(Resource.Id.qtyNum18);
            btn_increment_add18 = FindViewById<Button>(Resource.Id.buttonIncrementPlus18);
            btn_increment_minus18 = FindViewById<Button>(Resource.Id.buttonIncrementMinus18);
            btndelete18 = FindViewById<Button>(Resource.Id.buttonDelete18);
            imgview18 = FindViewById<ImageView>(Resource.Id.imageView18);

            base_price19 = FindViewById<TextView>(Resource.Id.base_price19);
            txtQuantity_19 = FindViewById<TextView>(Resource.Id.qtyNum19);
            btn_increment_add19 = FindViewById<Button>(Resource.Id.buttonIncrementPlus19);
            btn_increment_minus19 = FindViewById<Button>(Resource.Id.buttonIncrementMinus19);
            btndelete19 = FindViewById<Button>(Resource.Id.buttonDelete19);
            imgview19 = FindViewById<ImageView>(Resource.Id.imageView19);

            base_price20 = FindViewById<TextView>(Resource.Id.base_price20);
            txtQuantity_20 = FindViewById<TextView>(Resource.Id.qtyNum20);
            btn_increment_add20 = FindViewById<Button>(Resource.Id.buttonIncrementPlus20);
            btn_increment_minus20 = FindViewById<Button>(Resource.Id.buttonIncrementMinus20);
            btndelete20 = FindViewById<Button>(Resource.Id.buttonDelete20);
            imgview20 = FindViewById<ImageView>(Resource.Id.imageView20);

            base_price21 = FindViewById<TextView>(Resource.Id.base_price21);
            txtQuantity_21 = FindViewById<TextView>(Resource.Id.qtyNum21);
            btn_increment_add21 = FindViewById<Button>(Resource.Id.buttonIncrementPlus21);
            btn_increment_minus21 = FindViewById<Button>(Resource.Id.buttonIncrementMinus21);
            btndelete21 = FindViewById<Button>(Resource.Id.buttonDelete21);
            imgview21 = FindViewById<ImageView>(Resource.Id.imageView21);

            base_price22 = FindViewById<TextView>(Resource.Id.base_price22);
            txtQuantity_22 = FindViewById<TextView>(Resource.Id.qtyNum22);
            btn_increment_add22 = FindViewById<Button>(Resource.Id.buttonIncrementPlus22);
            btn_increment_minus22 = FindViewById<Button>(Resource.Id.buttonIncrementMinus22);
            btndelete22 = FindViewById<Button>(Resource.Id.buttonDelete22);
            imgview22 = FindViewById<ImageView>(Resource.Id.imageView22);

            base_price23 = FindViewById<TextView>(Resource.Id.base_price23);
            txtQuantity_23 = FindViewById<TextView>(Resource.Id.qtyNum23);
            btn_increment_add23 = FindViewById<Button>(Resource.Id.buttonIncrementPlus23);
            btn_increment_minus23 = FindViewById<Button>(Resource.Id.buttonIncrementMinus23);
            btndelete23 = FindViewById<Button>(Resource.Id.buttonDelete23);
            imgview23 = FindViewById<ImageView>(Resource.Id.imageView23);

            base_price24 = FindViewById<TextView>(Resource.Id.base_price24);
            txtQuantity_24 = FindViewById<TextView>(Resource.Id.qtyNum24);
            btn_increment_add24 = FindViewById<Button>(Resource.Id.buttonIncrementPlus24);
            btn_increment_minus24 = FindViewById<Button>(Resource.Id.buttonIncrementMinus24);
            btndelete24 = FindViewById<Button>(Resource.Id.buttonDelete24);
            imgview24 = FindViewById<ImageView>(Resource.Id.imageView24);

            // EFC BEEF CURRY

            base_price25 = FindViewById<TextView>(Resource.Id.base_price25);
            txtQuantity_25 = FindViewById<TextView>(Resource.Id.qtyNum25);
            btn_increment_add25 = FindViewById<Button>(Resource.Id.buttonIncrementPlus25);
            btn_increment_minus25 = FindViewById<Button>(Resource.Id.buttonIncrementMinus25);
            btndelete25 = FindViewById<Button>(Resource.Id.buttonDelete25);
            imgview25 = FindViewById<ImageView>(Resource.Id.imageView25);

            base_price26 = FindViewById<TextView>(Resource.Id.base_price26);
            txtQuantity_26 = FindViewById<TextView>(Resource.Id.qtyNum26);
            btn_increment_add26 = FindViewById<Button>(Resource.Id.buttonIncrementPlus26);
            btn_increment_minus26 = FindViewById<Button>(Resource.Id.buttonIncrementMinus26);
            btndelete26 = FindViewById<Button>(Resource.Id.buttonDelete26);
            imgview26 = FindViewById<ImageView>(Resource.Id.imageView26);

            base_price27 = FindViewById<TextView>(Resource.Id.base_price27);
            txtQuantity_27 = FindViewById<TextView>(Resource.Id.qtyNum27);
            btn_increment_add27 = FindViewById<Button>(Resource.Id.buttonIncrementPlus27);
            btn_increment_minus27 = FindViewById<Button>(Resource.Id.buttonIncrementMinus27);
            btndelete27 = FindViewById<Button>(Resource.Id.buttonDelete27);
            imgview27 = FindViewById<ImageView>(Resource.Id.imageView27);

            base_price28 = FindViewById<TextView>(Resource.Id.base_price28);
            txtQuantity_28 = FindViewById<TextView>(Resource.Id.qtyNum28);
            btn_increment_add28 = FindViewById<Button>(Resource.Id.buttonIncrementPlus28);
            btn_increment_minus28 = FindViewById<Button>(Resource.Id.buttonIncrementMinus28);
            btndelete28 = FindViewById<Button>(Resource.Id.buttonDelete28);
            imgview28 = FindViewById<ImageView>(Resource.Id.imageView28);

            base_price29 = FindViewById<TextView>(Resource.Id.base_price29);
            txtQuantity_29 = FindViewById<TextView>(Resource.Id.qtyNum29);
            btn_increment_add29 = FindViewById<Button>(Resource.Id.buttonIncrementPlus29);
            btn_increment_minus29 = FindViewById<Button>(Resource.Id.buttonIncrementMinus29);
            btndelete29 = FindViewById<Button>(Resource.Id.buttonDelete29);
            imgview29 = FindViewById<ImageView>(Resource.Id.imageView29);

            base_price30 = FindViewById<TextView>(Resource.Id.base_price30);
            txtQuantity_30 = FindViewById<TextView>(Resource.Id.qtyNum30);
            btn_increment_add30 = FindViewById<Button>(Resource.Id.buttonIncrementPlus30);
            btn_increment_minus30 = FindViewById<Button>(Resource.Id.buttonIncrementMinus30);
            btndelete30 = FindViewById<Button>(Resource.Id.buttonDelete30);
            imgview30 = FindViewById<ImageView>(Resource.Id.imageView30);

            base_price31 = FindViewById<TextView>(Resource.Id.base_price31);
            txtQuantity_31 = FindViewById<TextView>(Resource.Id.qtyNum31);
            btn_increment_add31 = FindViewById<Button>(Resource.Id.buttonIncrementPlus31);
            btn_increment_minus31 = FindViewById<Button>(Resource.Id.buttonIncrementMinus31);
            btndelete31 = FindViewById<Button>(Resource.Id.buttonDelete31);
            imgview31 = FindViewById<ImageView>(Resource.Id.imageView31);

            base_price32 = FindViewById<TextView>(Resource.Id.base_price32);
            txtQuantity_32 = FindViewById<TextView>(Resource.Id.qtyNum32);
            btn_increment_add32 = FindViewById<Button>(Resource.Id.buttonIncrementPlus32);
            btn_increment_minus32 = FindViewById<Button>(Resource.Id.buttonIncrementMinus32);
            btndelete32 = FindViewById<Button>(Resource.Id.buttonDelete32);
            imgview32 = FindViewById<ImageView>(Resource.Id.imageView32);

            // the rest product
            base_price33 = FindViewById<TextView>(Resource.Id.base_price33);
            txtQuantity_33 = FindViewById<TextView>(Resource.Id.qtyNum33);
            btn_increment_add33 = FindViewById<Button>(Resource.Id.buttonIncrementPlus33);
            btn_increment_minus33 = FindViewById<Button>(Resource.Id.buttonIncrementMinus33);
            btndelete33 = FindViewById<Button>(Resource.Id.buttonDelete33);
            imgview33 = FindViewById<ImageView>(Resource.Id.imageView33);

            base_price34 = FindViewById<TextView>(Resource.Id.base_price34);
            txtQuantity_34 = FindViewById<TextView>(Resource.Id.qtyNum34);
            btn_increment_add34 = FindViewById<Button>(Resource.Id.buttonIncrementPlus34);
            btn_increment_minus34 = FindViewById<Button>(Resource.Id.buttonIncrementMinus34);
            btndelete34 = FindViewById<Button>(Resource.Id.buttonDelete34);
            imgview34 = FindViewById<ImageView>(Resource.Id.imageView34);

            base_price35 = FindViewById<TextView>(Resource.Id.base_price35);
            txtQuantity_35 = FindViewById<TextView>(Resource.Id.qtyNum35);
            btn_increment_add35 = FindViewById<Button>(Resource.Id.buttonIncrementPlus35);
            btn_increment_minus35 = FindViewById<Button>(Resource.Id.buttonIncrementMinus35);
            btndelete35 = FindViewById<Button>(Resource.Id.buttonDelete35);
            imgview35 = FindViewById<ImageView>(Resource.Id.imageView35);

            base_price36 = FindViewById<TextView>(Resource.Id.base_price36);
            txtQuantity_36 = FindViewById<TextView>(Resource.Id.qtyNum36);
            btn_increment_add36 = FindViewById<Button>(Resource.Id.buttonIncrementPlus36);
            btn_increment_minus36 = FindViewById<Button>(Resource.Id.buttonIncrementMinus36);
            btndelete36 = FindViewById<Button>(Resource.Id.buttonDelete36);
            imgview36 = FindViewById<ImageView>(Resource.Id.imageView36);

            base_price37 = FindViewById<TextView>(Resource.Id.base_price37);
            txtQuantity_37 = FindViewById<TextView>(Resource.Id.qtyNum37);
            btn_increment_add37 = FindViewById<Button>(Resource.Id.buttonIncrementPlus37);
            btn_increment_minus37 = FindViewById<Button>(Resource.Id.buttonIncrementMinus37);
            btndelete37 = FindViewById<Button>(Resource.Id.buttonDelete37);
            imgview37 = FindViewById<ImageView>(Resource.Id.imageView37);

            // BEEF

            base_price38 = FindViewById<TextView>(Resource.Id.base_price38);
            txtQuantity_38 = FindViewById<TextView>(Resource.Id.qtyNum38);
            btn_increment_add38 = FindViewById<Button>(Resource.Id.buttonIncrementPlus38);
            btn_increment_minus38 = FindViewById<Button>(Resource.Id.buttonIncrementMinus38);
            btndelete38 = FindViewById<Button>(Resource.Id.buttonDelete38);
            imgview38 = FindViewById<ImageView>(Resource.Id.imageView38);

            base_price39 = FindViewById<TextView>(Resource.Id.base_price39);
            txtQuantity_39 = FindViewById<TextView>(Resource.Id.qtyNum39);
            btn_increment_add39 = FindViewById<Button>(Resource.Id.buttonIncrementPlus39);
            btn_increment_minus39 = FindViewById<Button>(Resource.Id.buttonIncrementMinus39);
            btndelete39 = FindViewById<Button>(Resource.Id.buttonDelete39);
            imgview39 = FindViewById<ImageView>(Resource.Id.imageView39);

            base_price40 = FindViewById<TextView>(Resource.Id.base_price40);
            txtQuantity_40 = FindViewById<TextView>(Resource.Id.qtyNum40);
            btn_increment_add40 = FindViewById<Button>(Resource.Id.buttonIncrementPlus40);
            btn_increment_minus40 = FindViewById<Button>(Resource.Id.buttonIncrementMinus40);
            btndelete40 = FindViewById<Button>(Resource.Id.buttonDelete40);
            imgview40 = FindViewById<ImageView>(Resource.Id.imageView40);

            base_price41 = FindViewById<TextView>(Resource.Id.base_price41);
            txtQuantity_41 = FindViewById<TextView>(Resource.Id.qtyNum41);
            btn_increment_add41 = FindViewById<Button>(Resource.Id.buttonIncrementPlus41);
            btn_increment_minus41 = FindViewById<Button>(Resource.Id.buttonIncrementMinus41);
            btndelete41 = FindViewById<Button>(Resource.Id.buttonDelete41);
            imgview41 = FindViewById<ImageView>(Resource.Id.imageView41);

            base_price42 = FindViewById<TextView>(Resource.Id.base_price42);
            txtQuantity_42 = FindViewById<TextView>(Resource.Id.qtyNum42);
            btn_increment_add42 = FindViewById<Button>(Resource.Id.buttonIncrementPlus42);
            btn_increment_minus42 = FindViewById<Button>(Resource.Id.buttonIncrementMinus42);
            btndelete42 = FindViewById<Button>(Resource.Id.buttonDelete42);
            imgview42 = FindViewById<ImageView>(Resource.Id.imageView42);

            // FISH
            base_price43 = FindViewById<TextView>(Resource.Id.base_price43);
            txtQuantity_43 = FindViewById<TextView>(Resource.Id.qtyNum43);
            btn_increment_add43 = FindViewById<Button>(Resource.Id.buttonIncrementPlus43);
            btn_increment_minus43 = FindViewById<Button>(Resource.Id.buttonIncrementMinus43);
            btndelete43 = FindViewById<Button>(Resource.Id.buttonDelete43);
            imgview43 = FindViewById<ImageView>(Resource.Id.imageView43);

            base_price44 = FindViewById<TextView>(Resource.Id.base_price44);
            txtQuantity_44 = FindViewById<TextView>(Resource.Id.qtyNum44);
            btn_increment_add44 = FindViewById<Button>(Resource.Id.buttonIncrementPlus44);
            btn_increment_minus44 = FindViewById<Button>(Resource.Id.buttonIncrementMinus44);
            btndelete44 = FindViewById<Button>(Resource.Id.buttonDelete44);
            imgview44 = FindViewById<ImageView>(Resource.Id.imageView44);

            base_price45 = FindViewById<TextView>(Resource.Id.base_price45);
            txtQuantity_45 = FindViewById<TextView>(Resource.Id.qtyNum45);
            btn_increment_add45 = FindViewById<Button>(Resource.Id.buttonIncrementPlus45);
            btn_increment_minus45 = FindViewById<Button>(Resource.Id.buttonIncrementMinus45);
            btndelete45 = FindViewById<Button>(Resource.Id.buttonDelete45);
            imgview45 = FindViewById<ImageView>(Resource.Id.imageView45);

            base_price46 = FindViewById<TextView>(Resource.Id.base_price46);
            txtQuantity_46 = FindViewById<TextView>(Resource.Id.qtyNum46);
            btn_increment_add46 = FindViewById<Button>(Resource.Id.buttonIncrementPlus46);
            btn_increment_minus46 = FindViewById<Button>(Resource.Id.buttonIncrementMinus46);
            btndelete46 = FindViewById<Button>(Resource.Id.buttonDelete46);
            imgview46 = FindViewById<ImageView>(Resource.Id.imageView46);

            // VEGAN
            base_price47 = FindViewById<TextView>(Resource.Id.base_price47);
            txtQuantity_47 = FindViewById<TextView>(Resource.Id.qtyNum47);
            btn_increment_add47 = FindViewById<Button>(Resource.Id.buttonIncrementPlus47);
            btn_increment_minus47 = FindViewById<Button>(Resource.Id.buttonIncrementMinus47);
            btndelete47 = FindViewById<Button>(Resource.Id.buttonDelete47);
            imgview47 = FindViewById<ImageView>(Resource.Id.imageView47);

            base_price48 = FindViewById<TextView>(Resource.Id.base_price48);
            txtQuantity_48 = FindViewById<TextView>(Resource.Id.qtyNum48);
            btn_increment_add48 = FindViewById<Button>(Resource.Id.buttonIncrementPlus48);
            btn_increment_minus48 = FindViewById<Button>(Resource.Id.buttonIncrementMinus48);
            btndelete48 = FindViewById<Button>(Resource.Id.buttonDelete48);
            imgview48 = FindViewById<ImageView>(Resource.Id.imageView48);

            base_price49 = FindViewById<TextView>(Resource.Id.base_price49);
            txtQuantity_49 = FindViewById<TextView>(Resource.Id.qtyNum49);
            btn_increment_add49 = FindViewById<Button>(Resource.Id.buttonIncrementPlus49);
            btn_increment_minus49 = FindViewById<Button>(Resource.Id.buttonIncrementMinus49);
            btndelete49 = FindViewById<Button>(Resource.Id.buttonDelete49);
            imgview49 = FindViewById<ImageView>(Resource.Id.imageView49);

            base_price50 = FindViewById<TextView>(Resource.Id.base_price50);
            txtQuantity_50 = FindViewById<TextView>(Resource.Id.qtyNum50);
            btn_increment_add50 = FindViewById<Button>(Resource.Id.buttonIncrementPlus50);
            btn_increment_minus50 = FindViewById<Button>(Resource.Id.buttonIncrementMinus50);
            btndelete50 = FindViewById<Button>(Resource.Id.buttonDelete50);
            imgview50 = FindViewById<ImageView>(Resource.Id.imageView50);

            base_price51 = FindViewById<TextView>(Resource.Id.base_price51);
            txtQuantity_51 = FindViewById<TextView>(Resource.Id.qtyNum51);
            btn_increment_add51 = FindViewById<Button>(Resource.Id.buttonIncrementPlus51);
            btn_increment_minus51 = FindViewById<Button>(Resource.Id.buttonIncrementMinus51);
            btndelete51 = FindViewById<Button>(Resource.Id.buttonDelete51);
            imgview51 = FindViewById<ImageView>(Resource.Id.imageView51);

            // PASTA
            base_price52 = FindViewById<TextView>(Resource.Id.base_price52);
            txtQuantity_52 = FindViewById<TextView>(Resource.Id.qtyNum52);
            btn_increment_add52 = FindViewById<Button>(Resource.Id.buttonIncrementPlus52);
            btn_increment_minus52 = FindViewById<Button>(Resource.Id.buttonIncrementMinus52);
            btndelete52 = FindViewById<Button>(Resource.Id.buttonDelete52);
            imgview52 = FindViewById<ImageView>(Resource.Id.imageView52);

            base_price53 = FindViewById<TextView>(Resource.Id.base_price53);
            txtQuantity_53 = FindViewById<TextView>(Resource.Id.qtyNum53);
            btn_increment_add53 = FindViewById<Button>(Resource.Id.buttonIncrementPlus53);
            btn_increment_minus53 = FindViewById<Button>(Resource.Id.buttonIncrementMinus53);
            btndelete53 = FindViewById<Button>(Resource.Id.buttonDelete53);
            imgview53 = FindViewById<ImageView>(Resource.Id.imageView53);

            base_price54 = FindViewById<TextView>(Resource.Id.base_price54);
            txtQuantity_54 = FindViewById<TextView>(Resource.Id.qtyNum54);
            btn_increment_add54 = FindViewById<Button>(Resource.Id.buttonIncrementPlus54);
            btn_increment_minus54 = FindViewById<Button>(Resource.Id.buttonIncrementMinus54);
            btndelete54 = FindViewById<Button>(Resource.Id.buttonDelete54);
            imgview54 = FindViewById<ImageView>(Resource.Id.imageView54);

            // SANDWICH
            base_price55 = FindViewById<TextView>(Resource.Id.base_price55);
            txtQuantity_55 = FindViewById<TextView>(Resource.Id.qtyNum55);
            btn_increment_add55 = FindViewById<Button>(Resource.Id.buttonIncrementPlus55);
            btn_increment_minus55 = FindViewById<Button>(Resource.Id.buttonIncrementMinus55);
            btndelete55 = FindViewById<Button>(Resource.Id.buttonDelete55);
            imgview55 = FindViewById<ImageView>(Resource.Id.imageView55);

            base_price56 = FindViewById<TextView>(Resource.Id.base_price56);
            txtQuantity_56 = FindViewById<TextView>(Resource.Id.qtyNum56);
            btn_increment_add56 = FindViewById<Button>(Resource.Id.buttonIncrementPlus56);
            btn_increment_minus56 = FindViewById<Button>(Resource.Id.buttonIncrementMinus56);
            btndelete56 = FindViewById<Button>(Resource.Id.buttonDelete56);
            imgview56 = FindViewById<ImageView>(Resource.Id.imageView56);

            base_price57 = FindViewById<TextView>(Resource.Id.base_price57);
            txtQuantity_57 = FindViewById<TextView>(Resource.Id.qtyNum57);
            btn_increment_add57 = FindViewById<Button>(Resource.Id.buttonIncrementPlus57);
            btn_increment_minus57 = FindViewById<Button>(Resource.Id.buttonIncrementMinus57);
            btndelete57 = FindViewById<Button>(Resource.Id.buttonDelete57);
            imgview57 = FindViewById<ImageView>(Resource.Id.imageView57);

            // SALAD
            base_price58 = FindViewById<TextView>(Resource.Id.base_price58);
            txtQuantity_58 = FindViewById<TextView>(Resource.Id.qtyNum58);
            btn_increment_add58 = FindViewById<Button>(Resource.Id.buttonIncrementPlus58);
            btn_increment_minus58 = FindViewById<Button>(Resource.Id.buttonIncrementMinus58);
            btndelete58 = FindViewById<Button>(Resource.Id.buttonDelete58);
            imgview58 = FindViewById<ImageView>(Resource.Id.imageView58);

            base_price59 = FindViewById<TextView>(Resource.Id.base_price59);
            txtQuantity_59 = FindViewById<TextView>(Resource.Id.qtyNum59);
            btn_increment_add59 = FindViewById<Button>(Resource.Id.buttonIncrementPlus59);
            btn_increment_minus59 = FindViewById<Button>(Resource.Id.buttonIncrementMinus59);
            btndelete59 = FindViewById<Button>(Resource.Id.buttonDelete59);
            imgview59 = FindViewById<ImageView>(Resource.Id.imageView59);

            base_price60 = FindViewById<TextView>(Resource.Id.base_price60);
            txtQuantity_60 = FindViewById<TextView>(Resource.Id.qtyNum60);
            btn_increment_add60 = FindViewById<Button>(Resource.Id.buttonIncrementPlus60);
            btn_increment_minus60 = FindViewById<Button>(Resource.Id.buttonIncrementMinus60);
            btndelete60 = FindViewById<Button>(Resource.Id.buttonDelete60);
            imgview60 = FindViewById<ImageView>(Resource.Id.imageView60);

            TextView txttitle = FindViewById<TextView>(Resource.Id.textView2);

            linear1 = FindViewById<LinearLayout>(Resource.Id.Linear1);
            linear2 = FindViewById<LinearLayout>(Resource.Id.Linear2);
            linear3 = FindViewById<LinearLayout>(Resource.Id.Linear3);
            linear4 = FindViewById<LinearLayout>(Resource.Id.Linear4);
            linear5 = FindViewById<LinearLayout>(Resource.Id.Linear5);
            linear6 = FindViewById<LinearLayout>(Resource.Id.Linear6);
            linear7 = FindViewById<LinearLayout>(Resource.Id.Linear7);
            linear8 = FindViewById<LinearLayout>(Resource.Id.Linear8);

            linear9 = FindViewById<LinearLayout>(Resource.Id.Linear9);
            linear10 = FindViewById<LinearLayout>(Resource.Id.Linear10);
            linear11 = FindViewById<LinearLayout>(Resource.Id.Linear11);
            linear12 = FindViewById<LinearLayout>(Resource.Id.Linear12);
            linear13 = FindViewById<LinearLayout>(Resource.Id.Linear13);
            linear14 = FindViewById<LinearLayout>(Resource.Id.Linear14);
            linear15 = FindViewById<LinearLayout>(Resource.Id.Linear15);
            linear16 = FindViewById<LinearLayout>(Resource.Id.Linear16);

            linear17 = FindViewById<LinearLayout>(Resource.Id.Linear17);
            linear18 = FindViewById<LinearLayout>(Resource.Id.Linear18);
            linear19 = FindViewById<LinearLayout>(Resource.Id.Linear19);
            linear20 = FindViewById<LinearLayout>(Resource.Id.Linear20);
            linear21 = FindViewById<LinearLayout>(Resource.Id.Linear21);
            linear22 = FindViewById<LinearLayout>(Resource.Id.Linear22);
            linear23 = FindViewById<LinearLayout>(Resource.Id.Linear23);
            linear24 = FindViewById<LinearLayout>(Resource.Id.Linear24);

            linear25 = FindViewById<LinearLayout>(Resource.Id.Linear25);
            linear26 = FindViewById<LinearLayout>(Resource.Id.Linear26);
            linear27 = FindViewById<LinearLayout>(Resource.Id.Linear27);
            linear28 = FindViewById<LinearLayout>(Resource.Id.Linear28);
            linear29 = FindViewById<LinearLayout>(Resource.Id.Linear29);
            linear30 = FindViewById<LinearLayout>(Resource.Id.Linear30);
            linear31 = FindViewById<LinearLayout>(Resource.Id.Linear31);
            linear32 = FindViewById<LinearLayout>(Resource.Id.Linear32);


            // chicken
            linear33 = FindViewById<LinearLayout>(Resource.Id.Linear33);
            linear34 = FindViewById<LinearLayout>(Resource.Id.Linear34);
            linear35 = FindViewById<LinearLayout>(Resource.Id.Linear35);
            linear36 = FindViewById<LinearLayout>(Resource.Id.Linear36);
            linear37 = FindViewById<LinearLayout>(Resource.Id.Linear37);

            // beef
            linear38 = FindViewById<LinearLayout>(Resource.Id.Linear38);
            linear39 = FindViewById<LinearLayout>(Resource.Id.Linear39);
            linear40 = FindViewById<LinearLayout>(Resource.Id.Linear40);
            linear41 = FindViewById<LinearLayout>(Resource.Id.Linear41);
            linear42 = FindViewById<LinearLayout>(Resource.Id.Linear42);

            // fish
            linear43 = FindViewById<LinearLayout>(Resource.Id.Linear43);
            linear44 = FindViewById<LinearLayout>(Resource.Id.Linear44);
            linear45 = FindViewById<LinearLayout>(Resource.Id.Linear45);
            linear46 = FindViewById<LinearLayout>(Resource.Id.Linear46);

            // vegan
            linear47 = FindViewById<LinearLayout>(Resource.Id.Linear47);
            linear48 = FindViewById<LinearLayout>(Resource.Id.Linear48);
            linear49 = FindViewById<LinearLayout>(Resource.Id.Linear49);
            linear50 = FindViewById<LinearLayout>(Resource.Id.Linear50);
            linear51 = FindViewById<LinearLayout>(Resource.Id.Linear51);

            // pasta
            linear52 = FindViewById<LinearLayout>(Resource.Id.Linear52);
            linear53 = FindViewById<LinearLayout>(Resource.Id.Linear53);
            linear54 = FindViewById<LinearLayout>(Resource.Id.Linear54);

            // sandwich
            linear55 = FindViewById<LinearLayout>(Resource.Id.Linear55);
            linear56 = FindViewById<LinearLayout>(Resource.Id.Linear56);
            linear57 = FindViewById<LinearLayout>(Resource.Id.Linear57);

            // salad
            linear58 = FindViewById<LinearLayout>(Resource.Id.Linear58);
            linear59 = FindViewById<LinearLayout>(Resource.Id.Linear59);
            linear60 = FindViewById<LinearLayout>(Resource.Id.Linear60);

            TextView subtotal = FindViewById<TextView>(Resource.Id.subTotal);
            TextView subtotal_value = FindViewById<TextView>(Resource.Id.subTotal_Value);

            btm_nav.NavigationItemSelected += Btm_nav_NavigationItemSelected;

            MySqlConnection conn = new MySqlConnection();

            string query = "server=localhost;port=3306;database=mydb;user id=mydbuser;password=123;";
            conn.ConnectionString = query;

            progressbar = FindViewById<ProgressBar>(Resource.Id.progressBar);

            progressbar.Visibility = ViewStates.Gone;
            //circleprogressbar.Visibility = ViewStates.Visible;
           

                try
                {
                   
                    conn.Open();

                using (MySqlCommand cmd_select1 = new MySqlCommand("select * from wp_product_cart where customer_name = " + session_user + "; " +
                    // EFC CHICKEN TERIYAKI
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id1 AND wp_product_cart.customer_name = @cust_name1 AND wp_product_cart.product_name = @prod_efc1;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id2 AND wp_product_cart.customer_name = @cust_name2 AND wp_product_cart.product_name = @prod_efc2;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id3 AND wp_product_cart.customer_name = @cust_name3 AND wp_product_cart.product_name = @prod_efc3;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id4 AND wp_product_cart.customer_name = @cust_name4 AND wp_product_cart.product_name = @prod_efc4;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id5 AND wp_product_cart.customer_name = @cust_name5 AND wp_product_cart.product_name = @prod_efc5;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id6 AND wp_product_cart.customer_name = @cust_name6 AND wp_product_cart.product_name = @prod_efc6;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id7 AND wp_product_cart.customer_name = @cust_name7 AND wp_product_cart.product_name = @prod_efc7;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id8 AND wp_product_cart.customer_name = @cust_name8 AND wp_product_cart.product_name = @prod_efc8;" +

                    // EFC CHICKEN CURRY
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id9 AND wp_product_cart.customer_name = @cust_name9 AND wp_product_cart.product_name = @prod_efc9;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id10 AND wp_product_cart.customer_name = @cust_name10 AND wp_product_cart.product_name = @prod_efc10;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id11 AND wp_product_cart.customer_name = @cust_name11 AND wp_product_cart.product_name = @prod_efc11;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id12 AND wp_product_cart.customer_name = @cust_name12 AND wp_product_cart.product_name = @prod_efc12;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id13 AND wp_product_cart.customer_name = @cust_name13 AND wp_product_cart.product_name = @prod_efc13;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id14 AND wp_product_cart.customer_name = @cust_name14 AND wp_product_cart.product_name = @prod_efc14;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id15 AND wp_product_cart.customer_name = @cust_name15 AND wp_product_cart.product_name = @prod_efc15;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id16 AND wp_product_cart.customer_name = @cust_name16 AND wp_product_cart.product_name = @prod_efc16;" +

                    // EFC BEEF TERIYAKI
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id17 AND wp_product_cart.customer_name = @cust_name17 AND wp_product_cart.product_name = @prod_efc17;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id18 AND wp_product_cart.customer_name = @cust_name18 AND wp_product_cart.product_name = @prod_efc18;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id19 AND wp_product_cart.customer_name = @cust_name19 AND wp_product_cart.product_name = @prod_efc19;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id20 AND wp_product_cart.customer_name = @cust_name20 AND wp_product_cart.product_name = @prod_efc20;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id21 AND wp_product_cart.customer_name = @cust_name21 AND wp_product_cart.product_name = @prod_efc21;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id22 AND wp_product_cart.customer_name = @cust_name22 AND wp_product_cart.product_name = @prod_efc22;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id23 AND wp_product_cart.customer_name = @cust_name23 AND wp_product_cart.product_name = @prod_efc23;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id24 AND wp_product_cart.customer_name = @cust_name24 AND wp_product_cart.product_name = @prod_efc24;" +

                    // EFC BEEF CURRY
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id25 AND wp_product_cart.customer_name = @cust_name25 AND wp_product_cart.product_name = @prod_efc25;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id26 AND wp_product_cart.customer_name = @cust_name26 AND wp_product_cart.product_name = @prod_efc26;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id27 AND wp_product_cart.customer_name = @cust_name27 AND wp_product_cart.product_name = @prod_efc27;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id28 AND wp_product_cart.customer_name = @cust_name28 AND wp_product_cart.product_name = @prod_efc28;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id29 AND wp_product_cart.customer_name = @cust_name29 AND wp_product_cart.product_name = @prod_efc29;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id30 AND wp_product_cart.customer_name = @cust_name30 AND wp_product_cart.product_name = @prod_efc30;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id31 AND wp_product_cart.customer_name = @cust_name31 AND wp_product_cart.product_name = @prod_efc31;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id32 AND wp_product_cart.customer_name = @cust_name32 AND wp_product_cart.product_name = @prod_efc32;" +

                    // The Rest Product
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id33 AND wp_product_cart.customer_name = @cust_name33 AND wp_product_cart.product_name = @prod_efc33;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id34 AND wp_product_cart.customer_name = @cust_name34 AND wp_product_cart.product_name = @prod_efc34;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id35 AND wp_product_cart.customer_name = @cust_name35 AND wp_product_cart.product_name = @prod_efc35;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id36 AND wp_product_cart.customer_name = @cust_name36 AND wp_product_cart.product_name = @prod_efc36;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id37 AND wp_product_cart.customer_name = @cust_name37 AND wp_product_cart.product_name = @prod_efc37;" +

                    // BEEF
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id38 AND wp_product_cart.customer_name = @cust_name38 AND wp_product_cart.product_name = @prod_efc38;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id39 AND wp_product_cart.customer_name = @cust_name39 AND wp_product_cart.product_name = @prod_efc39;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id40 AND wp_product_cart.customer_name = @cust_name40 AND wp_product_cart.product_name = @prod_efc40;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id41 AND wp_product_cart.customer_name = @cust_name41 AND wp_product_cart.product_name = @prod_efc41;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id42 AND wp_product_cart.customer_name = @cust_name42 AND wp_product_cart.product_name = @prod_efc42;" +

                    // FISH
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id43 AND wp_product_cart.customer_name = @cust_name43 AND wp_product_cart.product_name = @prod_efc43;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id44 AND wp_product_cart.customer_name = @cust_name44 AND wp_product_cart.product_name = @prod_efc44;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id45 AND wp_product_cart.customer_name = @cust_name45 AND wp_product_cart.product_name = @prod_efc45;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id46 AND wp_product_cart.customer_name = @cust_name46 AND wp_product_cart.product_name = @prod_efc46;" +

                    // VEGAN
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id47 AND wp_product_cart.customer_name = @cust_name47 AND wp_product_cart.product_name = @prod_efc47;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id48 AND wp_product_cart.customer_name = @cust_name48 AND wp_product_cart.product_name = @prod_efc48;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id49 AND wp_product_cart.customer_name = @cust_name49 AND wp_product_cart.product_name = @prod_efc49;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id50 AND wp_product_cart.customer_name = @cust_name50 AND wp_product_cart.product_name = @prod_efc50;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id51 AND wp_product_cart.customer_name = @cust_name51 AND wp_product_cart.product_name = @prod_efc51;" +

                    // PASTA
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id52 AND wp_product_cart.customer_name = @cust_name52 AND wp_product_cart.product_name = @prod_efc52;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id53 AND wp_product_cart.customer_name = @cust_name53 AND wp_product_cart.product_name = @prod_efc53;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id54 AND wp_product_cart.customer_name = @cust_name54 AND wp_product_cart.product_name = @prod_efc54;" +

                    // SANDWICH
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id55 AND wp_product_cart.customer_name = @cust_name55 AND wp_product_cart.product_name = @prod_efc55;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id56 AND wp_product_cart.customer_name = @cust_name56 AND wp_product_cart.product_name = @prod_efc56;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id57 AND wp_product_cart.customer_name = @cust_name57 AND wp_product_cart.product_name = @prod_efc57;" +

                    // SALAD
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id58 AND wp_product_cart.customer_name = @cust_name58 AND wp_product_cart.product_name = @prod_efc58;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id59 AND wp_product_cart.customer_name = @cust_name59 AND wp_product_cart.product_name = @prod_efc59;" +
                    "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id60 AND wp_product_cart.customer_name = @cust_name60 AND wp_product_cart.product_name = @prod_efc60;" +

                    // Sum Subtotal
                    "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;" +
                    // Sum Total
                        // the comment in below is show you how to select multiple row in a single queue ;)
                            //"select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                            //"(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;", conn))
                        // end multiple selection
                    "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price;", conn))
                {   // MySqlCommand cmd_select1 = new MySqlCommand("select * from wp_product_cart where session_order_id = @key_id1", conn);

                    // EFC CHICKEN TERIYAKI
                    cmd_select1.Parameters.AddWithValue("@key_id1", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc1", "EFC CHICKEN TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name1", session_user);
                    cmd_select1.Parameters.AddWithValue("@key_id2", 2);
                    cmd_select1.Parameters.AddWithValue("@prod_efc2", "EFC CHICKEN TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name2", session_user);
                    cmd_select1.Parameters.AddWithValue("@key_id3", 3);
                    cmd_select1.Parameters.AddWithValue("@prod_efc3", "EFC CHICKEN TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name3", session_user);
                    cmd_select1.Parameters.AddWithValue("@key_id4", 4);
                    cmd_select1.Parameters.AddWithValue("@prod_efc4", "EFC CHICKEN TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name4", session_user);
                    cmd_select1.Parameters.AddWithValue("@key_id5", 5);
                    cmd_select1.Parameters.AddWithValue("@prod_efc5", "EFC CHICKEN TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name5", session_user);
                    cmd_select1.Parameters.AddWithValue("@key_id6", 6);
                    cmd_select1.Parameters.AddWithValue("@prod_efc6", "EFC CHICKEN TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name6", session_user);
                    cmd_select1.Parameters.AddWithValue("@key_id7", 7);
                    cmd_select1.Parameters.AddWithValue("@prod_efc7", "EFC CHICKEN TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name7", session_user);
                    cmd_select1.Parameters.AddWithValue("@key_id8", 8);
                    cmd_select1.Parameters.AddWithValue("@prod_efc8", "EFC CHICKEN TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name8", session_user);

                    // EFC CHICKEN CURRY
                    cmd_select1.Parameters.AddWithValue("@key_id9", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc9", "EFC CHICKEN CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name9", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id10", 2);
                    cmd_select1.Parameters.AddWithValue("@prod_efc10", "EFC CHICKEN CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name10", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id11", 3);
                    cmd_select1.Parameters.AddWithValue("@prod_efc11", "EFC CHICKEN CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name11", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id12", 4);
                    cmd_select1.Parameters.AddWithValue("@prod_efc12", "EFC CHICKEN CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name12", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id13", 5);
                    cmd_select1.Parameters.AddWithValue("@prod_efc13", "EFC CHICKEN CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name13", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id14", 6);
                    cmd_select1.Parameters.AddWithValue("@prod_efc14", "EFC CHICKEN CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name14", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id15", 7);
                    cmd_select1.Parameters.AddWithValue("@prod_efc15", "EFC CHICKEN CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name15", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id16", 8);
                    cmd_select1.Parameters.AddWithValue("@prod_efc16", "EFC CHICKEN CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name16", session_user);

                    // EFC BEEF TERIYAKI
                    cmd_select1.Parameters.AddWithValue("@key_id17", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc17", "EFC BEEF TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name17", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id18", 2);
                    cmd_select1.Parameters.AddWithValue("@prod_efc18", "EFC BEEF TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name18", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id19", 3);
                    cmd_select1.Parameters.AddWithValue("@prod_efc19", "EFC BEEF TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name19", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id20", 4);
                    cmd_select1.Parameters.AddWithValue("@prod_efc20", "EFC BEEF TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name20", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id21", 5);
                    cmd_select1.Parameters.AddWithValue("@prod_efc21", "EFC BEEF TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name21", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id22", 6);
                    cmd_select1.Parameters.AddWithValue("@prod_efc22", "EFC BEEF TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name22", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id23", 7);
                    cmd_select1.Parameters.AddWithValue("@prod_efc23", "EFC BEEF TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name23", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id24", 8);
                    cmd_select1.Parameters.AddWithValue("@prod_efc24", "EFC BEEF TERIYAKI");
                    cmd_select1.Parameters.AddWithValue("@cust_name24", session_user);

                    // EFC BEEF CURRY
                    cmd_select1.Parameters.AddWithValue("@key_id25", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc25", "EFC BEEF CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name25", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id26", 2);
                    cmd_select1.Parameters.AddWithValue("@prod_efc26", "EFC BEEF CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name26", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id27", 3);
                    cmd_select1.Parameters.AddWithValue("@prod_efc27", "EFC BEEF CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name27", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id28", 4);
                    cmd_select1.Parameters.AddWithValue("@prod_efc28", "EFC BEEF CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name28", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id29", 5);
                    cmd_select1.Parameters.AddWithValue("@prod_efc29", "EFC BEEF CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name29", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id30", 6);
                    cmd_select1.Parameters.AddWithValue("@prod_efc30", "EFC BEEF CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name30", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id31", 7);
                    cmd_select1.Parameters.AddWithValue("@prod_efc31", "EFC BEEF CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name31", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id32", 8);
                    cmd_select1.Parameters.AddWithValue("@prod_efc32", "EFC BEEF CURRY");
                    cmd_select1.Parameters.AddWithValue("@cust_name32", session_user);

                    // The Rest Product
                    cmd_select1.Parameters.AddWithValue("@key_id33", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc33", "CHICKEN GRATIN WITH MIX VEGETABLES");
                    cmd_select1.Parameters.AddWithValue("@cust_name33", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id34", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc34", "ROASTED CHICKEN WITH FUNKY SALAD");
                    cmd_select1.Parameters.AddWithValue("@cust_name34", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id35", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc35", "CHICKEN WITH CARAMELIZED APPLE WITH POTATO WEDGES");
                    cmd_select1.Parameters.AddWithValue("@cust_name35", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id36", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc36", "ROSEMARY CHICKEN BREAST WITH SIMPLE PASTA OR MIX");
                    cmd_select1.Parameters.AddWithValue("@cust_name36", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id37", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc37", "CHICKEN TIKKA WITH PAN GRILL BANANA WITH MIX GREENS");
                    cmd_select1.Parameters.AddWithValue("@cust_name37", session_user);

                    // BEEF
                    cmd_select1.Parameters.AddWithValue("@key_id38", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc38", "ARROZ ALA CUBANA WITH GARLIC MUSHROOM SPINACH");
                    cmd_select1.Parameters.AddWithValue("@cust_name38", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id39", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc39", "MINT BEEF WITH SALSA");
                    cmd_select1.Parameters.AddWithValue("@cust_name39", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id40", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc40", "BALSAMIC BEEF WITH ONION CONFIT SERVED WITH MIX GREENS");
                    cmd_select1.Parameters.AddWithValue("@cust_name40", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id41", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc41", "MUSTARD BEEF CUTLETS WITH BASIL CREAM SERVED WITH MASHED POTATO");
                    cmd_select1.Parameters.AddWithValue("@cust_name41", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id42", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc42", "BEEF WITH CAPSICUM PESTO SERVED WITH MASHED KUMARA");
                    cmd_select1.Parameters.AddWithValue("@cust_name42", session_user);

                    // FISH
                    cmd_select1.Parameters.AddWithValue("@key_id43", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc43", "CHIMICHURRI FISH WITH RICE AND MIX GREENS");
                    cmd_select1.Parameters.AddWithValue("@cust_name43", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id44", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc44", "GINGER FISH DRIZZLED WITH WASABI SERVED WITH BROWN RICE");
                    cmd_select1.Parameters.AddWithValue("@cust_name44", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id45", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc45", "DILL PESTO TUNA WITH SIMPLE PASTA");
                    cmd_select1.Parameters.AddWithValue("@cust_name45", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id46", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc46", "YOGURT SALMON WITH SUNDRIED TOMATO SERVED WITH BROWN RICE");
                    cmd_select1.Parameters.AddWithValue("@cust_name46", session_user);

                    // VEGAN
                    cmd_select1.Parameters.AddWithValue("@key_id47", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc47", "BARBECUE CAULIFLOWER WITH MASHED POTATO");
                    cmd_select1.Parameters.AddWithValue("@cust_name47", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id48", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc48", "ROASTED SQUASH AND TOFU WITH PUMPKIN PUREE");
                    cmd_select1.Parameters.AddWithValue("@cust_name48", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id49", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc49", "CREAMY VEGAN PENNE");
                    cmd_select1.Parameters.AddWithValue("@cust_name49", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id50", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc50", "TOFU STEAK WITH MUSHROOM");
                    cmd_select1.Parameters.AddWithValue("@cust_name50", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id51", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc51", "LO MEIN PRIMAVERA PASTA");
                    cmd_select1.Parameters.AddWithValue("@cust_name51", session_user);

                    // PASTA
                    cmd_select1.Parameters.AddWithValue("@key_id52", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc52", "CHEESY COLD PASTA");
                    cmd_select1.Parameters.AddWithValue("@cust_name52", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id53", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc53", "PESTO PASTA WITH CHICKEN BREAST");
                    cmd_select1.Parameters.AddWithValue("@cust_name53", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id54", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc54", "SEAFOOD MARINARA");
                    cmd_select1.Parameters.AddWithValue("@cust_name54", session_user);

                    // SANDWICH
                    cmd_select1.Parameters.AddWithValue("@key_id55", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc55", "CHICKEN PITA");
                    cmd_select1.Parameters.AddWithValue("@cust_name55", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id56", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc56", "GRILLED VEGGIE SANDWICH");
                    cmd_select1.Parameters.AddWithValue("@cust_name56", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id57", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc57", "GRILLED BEEF WITH MOZZARELLA CHEESE");
                    cmd_select1.Parameters.AddWithValue("@cust_name57", session_user);

                    // SALAD
                    cmd_select1.Parameters.AddWithValue("@key_id58", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc58", "FUNKY FRUIT SALAD");
                    cmd_select1.Parameters.AddWithValue("@cust_name58", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id59", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc59", "MEDITERESIAN CHICKEN SALAD");
                    cmd_select1.Parameters.AddWithValue("@cust_name59", session_user);

                    cmd_select1.Parameters.AddWithValue("@key_id60", 1);
                    cmd_select1.Parameters.AddWithValue("@prod_efc60", "SALAD NICOISE");
                    cmd_select1.Parameters.AddWithValue("@cust_name60", session_user);

                    // subtotal parameter
                    cmd_select1.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                    // total parameter
                    cmd_select1.Parameters.AddWithValue("@cust_name_total_price", session_user);
                    cmd_select1.Parameters.AddWithValue("@cust_name_total_price2", session_user);
                    //cmd_select1.Parameters.AddWithValue("@customer_name1", session_user);
                    //cmd_select1.Parameters.AddWithValue("product_name1", "EFC CHICKEN TERIYAKI");

                    using (MySqlDataReader myReader = cmd_select1.ExecuteReader())
                    {

                        int quantity1, quantity2, quantity3, quantity4, quantity5, quantity6, quantity7, quantity8;
                        int quantity9, quantity10, quantity11, quantity12, quantity13, quantity14, quantity15, quantity16;
                        int quantity17, quantity18, quantity19, quantity20, quantity21, quantity22, quantity23, quantity24;
                        int quantity25, quantity26, quantity27, quantity28, quantity29, quantity30, quantity31, quantity32;

                        // the rest product
                        int quantity33, quantity34, quantity35, quantity36, quantity37;
                        // beef
                        int quantity38, quantity39, quantity40, quantity41, quantity42;
                        // fish
                        int quantity43, quantity44, quantity45, quantity46;
                        // vegan
                        int quantity47, quantity48, quantity49, quantity50, quantity51;
                        // pasta
                        int quantity52, quantity53, quantity54;
                        // sandwich
                        int quantity55, quantity56, quantity57;
                        // salad
                        int quantity58, quantity59, quantity60;

                        int price1, price2, price3, price4, price5, price6, price7, price8;
                        int price9, price10, price11, price12, price13, price14, price15, price16;
                        int price17, price18, price19, price20, price21, price22, price23, price24;
                        int price25, price26, price27, price28, price29, price30, price31, price32;

                        // the rest product
                        int price33, price34, price35, price36, price37;
                        // beef
                        int price38, price39, price40, price41, price42;
                        // fish
                        int price43, price44, price45, price46;
                        // vegan
                        int price47, price48, price49, price50, price51;
                        // pasta
                        int price52, price53, price54;
                        // sandwich
                        int price55, price56, price57;
                        // salad
                        int price58, price59, price60;

                        string img_url1 = "", img_url2 = "", img_url3 = "", img_url4 = "", img_url5 = "", img_url6 = "", img_url7 = "", img_url8 = "";
                        string img_url9 = "", img_url10 = "", img_url11 = "", img_url12 = "", img_url13 = "", img_url14 = "", img_url15 = "", img_url16 = "";
                        string img_url17 = "", img_url18 = "", img_url19 = "", img_url20 = "", img_url21 = "", img_url22 = "", img_url23 = "", img_url24 = "";
                        string img_url25 = "", img_url26 = "", img_url27 = "", img_url28 = "", img_url29 = "", img_url30 = "", img_url31 = "", img_url32 = "";

                        // the rest product
                        string img_url33 = "", img_url34 = "", img_url35 = "", img_url36 = "", img_url37 = "";
                        // beef
                        string img_url38 = "", img_url39 = "", img_url40 = "", img_url41 = "", img_url42 = "";
                        // fish
                        string img_url43 = "", img_url44 = "", img_url45 = "", img_url46 = "";
                        // vegan
                        string img_url47 = "", img_url48 = "", img_url49 = "", img_url50 = "", img_url51 = "";
                        // pasta
                        string img_url52 = "", img_url53 = "", img_url54 = "";
                        // sandwich
                        string img_url55 = "", img_url56 = "", img_url57 = "";
                        // salad
                        string img_url58 = "", img_url59 = "", img_url60 = "";

                        if (myReader.HasRows)
                        {
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price1 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price1.Text = "₱" + price1.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity1 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;
                                    increment_int = quantity1;
                                    
                                    txtQuantity_1.Text = increment_int.ToString();


                                    img_url1 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url1))
                                            .Into(imgview1);


                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price2 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price2.Text = "₱" + price2.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity2 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int2 = quantity2;

                                    txtQuantity_2.Text = increment_int2.ToString();

                                    img_url2 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url2))
                                            .Into(imgview2);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price3 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price3.Text = "₱" + price3.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity3 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int3 = quantity3;

                                    txtQuantity_3.Text = increment_int3.ToString();

                                    img_url3 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url3))
                                            .Into(imgview3);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price4 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price4.Text = "₱" + price4.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity4 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int4 = quantity4;

                                    txtQuantity_4.Text = increment_int4.ToString();

                                    img_url4 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url4))
                                            .Into(imgview4);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price5 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price5.Text = "₱" + price5.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity5 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int5 = quantity5;

                                    txtQuantity_5.Text = increment_int5.ToString();

                                    img_url5 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url5))
                                            .Into(imgview5);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price6 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price6.Text = "₱" + price6.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity6 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int6 = quantity6;

                                    txtQuantity_6.Text = increment_int6.ToString();

                                    img_url6 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url6))
                                            .Into(imgview6);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price7 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price7.Text = "₱" + price7.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity7 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int7 = quantity7;

                                    txtQuantity_7.Text = increment_int7.ToString();

                                    img_url7 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url7))
                                            .Into(imgview7);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price8 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price8.Text = "₱" + price8.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity8 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int8 = quantity8;

                                    txtQuantity_8.Text = increment_int8.ToString();

                                    img_url8 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url8))
                                            .Into(imgview8);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price9 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price9.Text = "₱" + price9.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity9 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int9 = quantity9;

                                    txtQuantity_9.Text = increment_int9.ToString();

                                    img_url9 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url9))
                                            .Into(imgview9);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price10 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price10.Text = "₱" + price10.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity10 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int10 = quantity10;

                                    txtQuantity_10.Text = increment_int10.ToString();

                                    img_url10 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url10))
                                            .Into(imgview10);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price11 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price11.Text = "₱" + price11.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity11 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int11 = quantity11;

                                    txtQuantity_11.Text = increment_int11.ToString();

                                    img_url11 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url11))
                                            .Into(imgview11);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price12 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price12.Text = "₱" + price12.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity12 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int12 = quantity12;

                                    txtQuantity_12.Text = increment_int12.ToString();

                                    img_url12 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url12))
                                            .Into(imgview12);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price13 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price13.Text = "₱" + price13.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity13 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int13 = quantity13;

                                    txtQuantity_13.Text = increment_int13.ToString();

                                    img_url13 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url13))
                                            .Into(imgview13);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price14 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price14.Text = "₱" + price14.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity14 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int14 = quantity14;

                                    txtQuantity_14.Text = increment_int14.ToString();

                                    img_url14 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url14))
                                            .Into(imgview14);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price15 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price15.Text = "₱" + price15.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity15 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int15 = quantity15;

                                    txtQuantity_15.Text = increment_int15.ToString();

                                    img_url15 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url15))
                                            .Into(imgview15);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price16 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price16.Text = "₱" + price16.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity16 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int16 = quantity16;

                                    txtQuantity_16.Text = increment_int16.ToString();

                                    img_url16 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url16))
                                            .Into(imgview16);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price17 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price17.Text = "₱" + price17.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity17 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int17 = quantity17;

                                    txtQuantity_17.Text = increment_int17.ToString();

                                    img_url17 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url17))
                                            .Into(imgview17);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price18 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price18.Text = "₱" + price18.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity18 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int18 = quantity18;

                                    txtQuantity_18.Text = increment_int18.ToString();

                                    img_url18 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url18))
                                            .Into(imgview18);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price19 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price19.Text = "₱" + price19.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity19 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int19 = quantity19;

                                    txtQuantity_19.Text = increment_int19.ToString();

                                    img_url19 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url19))
                                            .Into(imgview19);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price20 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price20.Text = "₱" + price20.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity20 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int20 = quantity20;

                                    txtQuantity_20.Text = increment_int20.ToString();

                                    img_url20 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url20))
                                            .Into(imgview20);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price21 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price21.Text = "₱" + price21.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity21 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int21 = quantity21;

                                    txtQuantity_21.Text = increment_int21.ToString();

                                    img_url21 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url21))
                                            .Into(imgview21);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price22 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price22.Text = "₱" + price22.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity22 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int22 = quantity22;

                                    txtQuantity_22.Text = increment_int22.ToString();

                                    img_url22 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url22))
                                            .Into(imgview22);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price23 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price23.Text = "₱" + price23.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity23 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int23 = quantity23;

                                    txtQuantity_23.Text = increment_int23.ToString();

                                    img_url23 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url23))
                                            .Into(imgview23);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price24 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price24.Text = "₱" + price24.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity24 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int24 = quantity24;

                                    txtQuantity_24.Text = increment_int24.ToString();

                                    img_url24 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url24))
                                            .Into(imgview24);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price25 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price25.Text = "₱" + price25.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity25 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int25 = quantity25;

                                    txtQuantity_25.Text = increment_int25.ToString();

                                    img_url25 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url25))
                                            .Into(imgview25);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price26 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price26.Text = "₱" + price26.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity26 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int26 = quantity26;

                                    txtQuantity_26.Text = increment_int26.ToString();

                                    img_url26 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url26))
                                            .Into(imgview26);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price27 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price27.Text = "₱" + price27.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity27 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int27 = quantity27;

                                    txtQuantity_27.Text = increment_int27.ToString();

                                    img_url27 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url27))
                                            .Into(imgview27);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price28 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price28.Text = "₱" + price28.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity28 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int28 = quantity28;

                                    txtQuantity_28.Text = increment_int28.ToString();

                                    img_url28 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url28))
                                            .Into(imgview28);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price29 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price29.Text = "₱" + price29.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity29 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int29 = quantity29;

                                    txtQuantity_29.Text = increment_int29.ToString();

                                    img_url29 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url29))
                                            .Into(imgview29);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price30 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price30.Text = "₱" + price30.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity30 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int30 = quantity30;

                                    txtQuantity_30.Text = increment_int30.ToString();

                                    img_url30 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url30))
                                            .Into(imgview30);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price31 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price31.Text = "₱" + price31.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity31 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int31 = quantity31;

                                    txtQuantity_31.Text = increment_int31.ToString();

                                    img_url31 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url31))
                                            .Into(imgview31);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price32 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price32.Text = "₱" + price32.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity32 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int32 = quantity32;

                                    txtQuantity_32.Text = increment_int32.ToString();

                                    img_url32 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url32))
                                            .Into(imgview32);
                                }
                            }

                            // The Rest Product
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price33 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price33.Text = "₱" + price33.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity33 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int33 = quantity33;

                                    txtQuantity_33.Text = increment_int33.ToString();

                                    img_url33 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url33))
                                            .Into(imgview33);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price34 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price34.Text = "₱" + price34.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity34 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int34 = quantity34;

                                    txtQuantity_34.Text = increment_int34.ToString();

                                    img_url34 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url34))
                                            .Into(imgview34);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price35 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price35.Text = "₱" + price35.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity35 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int35 = quantity35;

                                    txtQuantity_35.Text = increment_int35.ToString();

                                    img_url35 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url35))
                                            .Into(imgview35);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price36 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price36.Text = "₱" + price36.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity36 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int36 = quantity36;

                                    txtQuantity_36.Text = increment_int36.ToString();

                                    img_url36 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url36))
                                            .Into(imgview36);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price37 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price37.Text = "₱" + price37.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity37 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int37 = quantity37;

                                    txtQuantity_37.Text = increment_int37.ToString();

                                    img_url37 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url37))
                                            .Into(imgview37);
                                }
                            }

                            // beef
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price38 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price38.Text = "₱" + price38.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity38 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int38 = quantity38;

                                    txtQuantity_38.Text = increment_int38.ToString();

                                    img_url38 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url38))
                                            .Into(imgview38);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price39 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price39.Text = "₱" + price39.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity39 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int39 = quantity39;

                                    txtQuantity_39.Text = increment_int39.ToString();

                                    img_url39 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url39))
                                            .Into(imgview39);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price40 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price40.Text = "₱" + price40.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity40 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int40 = quantity40;

                                    txtQuantity_40.Text = increment_int40.ToString();

                                    img_url40 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url40))
                                            .Into(imgview40);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price41 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price41.Text = "₱" + price41.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity41 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int41 = quantity41;

                                    txtQuantity_41.Text = increment_int41.ToString();

                                    img_url41 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url41))
                                            .Into(imgview41);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price42 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price42.Text = "₱" + price42.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity42 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int42 = quantity42;

                                    txtQuantity_42.Text = increment_int42.ToString();

                                    img_url42 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url42))
                                            .Into(imgview42);
                                }
                            }

                            // FISH
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price43 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price43.Text = "₱" + price43.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity43 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int43 = quantity43;

                                    txtQuantity_43.Text = increment_int43.ToString();

                                    img_url43 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url43))
                                            .Into(imgview43);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price44 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price44.Text = "₱" + price44.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity44 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int44 = quantity44;

                                    txtQuantity_44.Text = increment_int44.ToString();

                                    img_url44 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url44))
                                            .Into(imgview44);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price45 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price45.Text = "₱" + price45.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity45 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int45 = quantity45;

                                    txtQuantity_45.Text = increment_int45.ToString();

                                    img_url45 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url45))
                                            .Into(imgview45);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price46 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price46.Text = "₱" + price46.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity46 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int46 = quantity46;

                                    txtQuantity_46.Text = increment_int46.ToString();

                                    img_url46 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url46))
                                            .Into(imgview46);
                                }
                            }

                            // VEGAN
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price47 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price47.Text = "₱" + price47.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity47 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int47 = quantity47;

                                    txtQuantity_47.Text = increment_int47.ToString();

                                    img_url47 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url47))
                                            .Into(imgview47);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price48 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price48.Text = "₱" + price48.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity48 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int48 = quantity48;

                                    txtQuantity_48.Text = increment_int48.ToString();

                                    img_url48 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url48))
                                            .Into(imgview48);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price49 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price49.Text = "₱" + price49.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity49 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int49 = quantity49;

                                    txtQuantity_49.Text = increment_int49.ToString();

                                    img_url49 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url49))
                                            .Into(imgview49);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price50 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price50.Text = "₱" + price50.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity50 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int50 = quantity50;

                                    txtQuantity_50.Text = increment_int50.ToString();

                                    img_url50 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url50))
                                            .Into(imgview50);
                                }
                            }
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price51 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price51.Text = "₱" + price51.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity51 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int51 = quantity51;

                                    txtQuantity_51.Text = increment_int51.ToString();

                                    img_url51 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url51))
                                            .Into(imgview51);
                                }
                            }

                            // pasta
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price52 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price52.Text = "₱" + price52.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity52 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int52 = quantity52;

                                    txtQuantity_52.Text = increment_int52.ToString();

                                    img_url52 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url52))
                                            .Into(imgview52);
                                }
                            }

                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price53 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price53.Text = "₱" + price53.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity53 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int53 = quantity53;

                                    txtQuantity_53.Text = increment_int53.ToString();

                                    img_url53 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url53))
                                            .Into(imgview53);
                                }
                            }

                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price54 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price54.Text = "₱" + price54.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity54 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int54 = quantity54;

                                    txtQuantity_54.Text = increment_int54.ToString();

                                    img_url54 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url54))
                                            .Into(imgview54);
                                }
                            }

                            // SANDWICH
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price55 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price55.Text = "₱" + price55.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity55 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int55 = quantity55;

                                    txtQuantity_55.Text = increment_int55.ToString();

                                    img_url55 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url55))
                                            .Into(imgview55);
                                }
                            }

                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price56 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price56.Text = "₱" + price56.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity56 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int56 = quantity56;

                                    txtQuantity_56.Text = increment_int56.ToString();

                                    img_url56 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url56))
                                            .Into(imgview56);
                                }
                            }

                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price57 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price57.Text = "₱" + price57.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity57 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int57 = quantity57;

                                    txtQuantity_57.Text = increment_int57.ToString();

                                    img_url57 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url57))
                                            .Into(imgview57);
                                }
                            }

                            // SALAD
                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price58 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price58.Text = "₱" + price58.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity58 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int58 = quantity58;

                                    txtQuantity_58.Text = increment_int58.ToString();

                                    img_url58 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url58))
                                            .Into(imgview58);
                                }
                            }

                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price59 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price59.Text = "₱" + price59.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity59 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int59 = quantity59;

                                    txtQuantity_59.Text = increment_int59.ToString();

                                    img_url59 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url59))
                                            .Into(imgview59);
                                }
                            }

                            if (myReader.NextResult())
                            {
                                while (myReader.Read())
                                {
                                    price60 = int.Parse(myReader["compute_qty_price"].ToString());
                                    base_price60.Text = "₱" + price60.ToString() + ".00";
                                    //user1 = myReader["quantity"].ToString();
                                    quantity60 = int.Parse(myReader["quantity"].ToString());
                                    //txttitle.Text = user1;

                                    increment_int60 = quantity60;

                                    txtQuantity_60.Text = increment_int60.ToString();

                                    img_url60 = myReader["image"].ToString();

                                    Picasso.With(this)
                                            .Load((img_url60))
                                            .Into(imgview60);
                                }
                            }

                            //subtotal
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {
                                    int subtotal_db, subtotal_result;
                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;


                                    subtotal_result = subtotal_db;

                                    subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }

                            }


                            //total
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {
                                    int total_price, result1, final_result;
                                    //user1 = myReader["quantity"].ToString();
                                    total_price = int.Parse(myReader["total_price"].ToString());
                                    //txttitle.Text = user1;

                                    result1 = total_price;

                                    final_result = result1;

                                    nav_bottom_item.SetTitle(final_result.ToString());

                                }

                            }

                        }
                        else
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("0 ITEM");
                            except.SetMessage("There's no item in your cart");
                            except.SetPositiveButton("Ok", (senderAlert, args) =>
                            {
                                except.Dispose();
                                Finish();
                            });
                            except.Show();
                        }

                    }
                }

                conn.Close();
            }
                catch (MySqlException ex)
                {
                    Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                    except.SetTitle("Connection Timeout");
                    except.SetMessage(ex.ToString());
                    except.SetPositiveButton("Ok", (senderAlert, args) =>
                    {

                        except.Dispose();
                    });
                    except.Show();
                }
                finally
                {
                    conn.Close();
                }

            // validation of button increment
            
            // EFC CHICKEN TERIYAKI
            //1
            if (increment_int <= 1)
            {
                btn_increment_minus1.Enabled = false;
            }
            if (increment_int >= 99)
            {
                btn_increment_add1.Enabled = false;
            }
            //2
            if (increment_int2 <= 1)
            {
                btn_increment_minus2.Enabled = false;
            }
            if (increment_int2 >= 99)
            {
                btn_increment_add2.Enabled = false;
            }
            //3
            if (increment_int3 <= 1)
            {
                btn_increment_minus3.Enabled = false;
            }
            if (increment_int3 >= 99)
            {
                btn_increment_add3.Enabled = false;
            }
            //4
            if (increment_int4 <= 1)
            {
                btn_increment_minus4.Enabled = false;
            }
            if (increment_int4 >= 99)
            {
                btn_increment_add4.Enabled = false;
            }
            //5
            if (increment_int5 <= 1)
            {
                btn_increment_minus5.Enabled = false;
            }
            if (increment_int5 >= 99)
            {
                btn_increment_add5.Enabled = false;
            }
            //6
            if (increment_int6 <= 1)
            {
                btn_increment_minus6.Enabled = false;
            }
            if (increment_int6 >= 99)
            {
                btn_increment_add6.Enabled = false;
            }
            //7
            if (increment_int7 <= 1)
            {
                btn_increment_minus7.Enabled = false;
            }
            if (increment_int7 >= 99)
            {
                btn_increment_add7.Enabled = false;
            }
            //8
            if (increment_int8 <= 1)
            {
                btn_increment_minus8.Enabled = false;
            }
            if (increment_int8 >= 99)
            {
                btn_increment_add8.Enabled = false;
            }

            // EFC CHICKEN CURRY
            //1
            if (increment_int9 <= 1)
            {
                btn_increment_minus9.Enabled = false;
            }
            if (increment_int9 >= 99)
            {
                btn_increment_add9.Enabled = false;
            }
            //2
            if (increment_int10 <= 1)
            {
                btn_increment_minus10.Enabled = false;
            }
            if (increment_int10 >= 99)
            {
                btn_increment_add10.Enabled = false;
            }
            //3
            if (increment_int11 <= 1)
            {
                btn_increment_minus11.Enabled = false;
            }
            if (increment_int11 >= 99)
            {
                btn_increment_add11.Enabled = false;
            }
            //4
            if (increment_int12 <= 1)
            {
                btn_increment_minus12.Enabled = false;
            }
            if (increment_int12 >= 99)
            {
                btn_increment_add12.Enabled = false;
            }
            //5
            if (increment_int13 <= 1)
            {
                btn_increment_minus13.Enabled = false;
            }
            if (increment_int13 >= 99)
            {
                btn_increment_add13.Enabled = false;
            }
            //6
            if (increment_int14 <= 1)
            {
                btn_increment_minus14.Enabled = false;
            }
            if (increment_int14 >= 99)
            {
                btn_increment_add14.Enabled = false;
            }
            //7
            if (increment_int15 <= 1)
            {
                btn_increment_minus15.Enabled = false;
            }
            if (increment_int15 >= 99)
            {
                btn_increment_add15.Enabled = false;
            }
            //8
            if (increment_int16 <= 1)
            {
                btn_increment_minus16.Enabled = false;
            }
            if (increment_int16 >= 99)
            {
                btn_increment_add16.Enabled = false;
            }

            // EFC BEEF TERIYAKI
            //1
            if (increment_int17 <= 1)
            {
                btn_increment_minus17.Enabled = false;
            }
            if (increment_int17 >= 99)
            {
                btn_increment_add17.Enabled = false;
            }
            //2
            if (increment_int18 <= 1)
            {
                btn_increment_minus18.Enabled = false;
            }
            if (increment_int18 >= 99)
            {
                btn_increment_add18.Enabled = false;
            }
            //3
            if (increment_int19 <= 1)
            {
                btn_increment_minus19.Enabled = false;
            }
            if (increment_int19 >= 99)
            {
                btn_increment_add19.Enabled = false;
            }
            //4
            if (increment_int20 <= 1)
            {
                btn_increment_minus20.Enabled = false;
            }
            if (increment_int20 >= 99)
            {
                btn_increment_add20.Enabled = false;
            }
            //5
            if (increment_int21 <= 1)
            {
                btn_increment_minus21.Enabled = false;
            }
            if (increment_int21 >= 99)
            {
                btn_increment_add21.Enabled = false;
            }
            //6
            if (increment_int22 <= 1)
            {
                btn_increment_minus22.Enabled = false;
            }
            if (increment_int22 >= 99)
            {
                btn_increment_add22.Enabled = false;
            }
            //7
            if (increment_int23 <= 1)
            {
                btn_increment_minus23.Enabled = false;
            }
            if (increment_int23 >= 99)
            {
                btn_increment_add23.Enabled = false;
            }
            //8
            if (increment_int24 <= 1)
            {
                btn_increment_minus24.Enabled = false;
            }
            if (increment_int24 >= 99)
            {
                btn_increment_add24.Enabled = false;
            }

            // EFC BEEF CURRY
            //1
            if (increment_int25 <= 1)
            {
                btn_increment_minus25.Enabled = false;
            }
            if (increment_int25 >= 99)
            {
                btn_increment_add25.Enabled = false;
            }
            //2
            if (increment_int26 <= 1)
            {
                btn_increment_minus26.Enabled = false;
            }
            if (increment_int26 >= 99)
            {
                btn_increment_add26.Enabled = false;
            }
            //3
            if (increment_int27 <= 1)
            {
                btn_increment_minus27.Enabled = false;
            }
            if (increment_int27 >= 99)
            {
                btn_increment_add27.Enabled = false;
            }
            //4
            if (increment_int28 <= 1)
            {
                btn_increment_minus28.Enabled = false;
            }
            if (increment_int28 >= 99)
            {
                btn_increment_add28.Enabled = false;
            }
            //5
            if (increment_int29 <= 1)
            {
                btn_increment_minus29.Enabled = false;
            }
            if (increment_int29 >= 99)
            {
                btn_increment_add29.Enabled = false;
            }
            //6
            if (increment_int30 <= 1)
            {
                btn_increment_minus30.Enabled = false;
            }
            if (increment_int30 >= 99)
            {
                btn_increment_add30.Enabled = false;
            }
            //7
            if (increment_int31 <= 1)
            {
                btn_increment_minus31.Enabled = false;
            }
            if (increment_int31 >= 99)
            {
                btn_increment_add31.Enabled = false;
            }
            //8
            if (increment_int32 <= 1)
            {
                btn_increment_minus32.Enabled = false;
            }
            if (increment_int32 >= 99)
            {
                btn_increment_add32.Enabled = false;
            }

            // The Rest Product
            if (increment_int33 <= 1)
            {
                btn_increment_minus33.Enabled = false;
            }
            if (increment_int33 >= 99)
            {
                btn_increment_add33.Enabled = false;
            }

            if (increment_int34 <= 1)
            {
                btn_increment_minus34.Enabled = false;
            }
            if (increment_int34 >= 99)
            {
                btn_increment_add34.Enabled = false;
            }

            if (increment_int35 <= 1)
            {
                btn_increment_minus35.Enabled = false;
            }
            if (increment_int35 >= 99)
            {
                btn_increment_add35.Enabled = false;
            }

            if (increment_int36 <= 1)
            {
                btn_increment_minus36.Enabled = false;
            }
            if (increment_int36 >= 99)
            {
                btn_increment_add36.Enabled = false;
            }

            if (increment_int37 <= 1)
            {
                btn_increment_minus37.Enabled = false;
            }
            if (increment_int37 >= 99)
            {
                btn_increment_add37.Enabled = false;
            }

            // beef
            if (increment_int38 <= 1)
            {
                btn_increment_minus38.Enabled = false;
            }
            if (increment_int38 >= 99)
            {
                btn_increment_add38.Enabled = false;
            }

            if (increment_int39 <= 1)
            {
                btn_increment_minus39.Enabled = false;
            }
            if (increment_int39 >= 99)
            {
                btn_increment_add39.Enabled = false;
            }

            if (increment_int40 <= 1)
            {
                btn_increment_minus40.Enabled = false;
            }
            if (increment_int40 >= 99)
            {
                btn_increment_add40.Enabled = false;
            }

            if (increment_int41 <= 1)
            {
                btn_increment_minus41.Enabled = false;
            }
            if (increment_int41 >= 99)
            {
                btn_increment_add41.Enabled = false;
            }

            if (increment_int42 <= 1)
            {
                btn_increment_minus42.Enabled = false;
            }
            if (increment_int42 >= 99)
            {
                btn_increment_add42.Enabled = false;
            }

            // FISH
            if (increment_int43 <= 1)
            {
                btn_increment_minus43.Enabled = false;
            }
            if (increment_int43 >= 99)
            {
                btn_increment_add43.Enabled = false;
            }

            if (increment_int44 <= 1)
            {
                btn_increment_minus44.Enabled = false;
            }
            if (increment_int44 >= 99)
            {
                btn_increment_add44.Enabled = false;
            }

            if (increment_int45 <= 1)
            {
                btn_increment_minus45.Enabled = false;
            }
            if (increment_int45 >= 99)
            {
                btn_increment_add45.Enabled = false;
            }

            if (increment_int46 <= 1)
            {
                btn_increment_minus46.Enabled = false;
            }
            if (increment_int46 >= 99)
            {
                btn_increment_add46.Enabled = false;
            }

            // VEGAN
            if (increment_int47 <= 1)
            {
                btn_increment_minus47.Enabled = false;
            }
            if (increment_int47 >= 99)
            {
                btn_increment_add47.Enabled = false;
            }

            if (increment_int48 <= 1)
            {
                btn_increment_minus48.Enabled = false;
            }
            if (increment_int48 >= 99)
            {
                btn_increment_add48.Enabled = false;
            }

            if (increment_int49 <= 1)
            {
                btn_increment_minus49.Enabled = false;
            }
            if (increment_int49 >= 99)
            {
                btn_increment_add49.Enabled = false;
            }

            if (increment_int50 <= 1)
            {
                btn_increment_minus50.Enabled = false;
            }
            if (increment_int50 >= 99)
            {
                btn_increment_add50.Enabled = false;
            }

            if (increment_int51 <= 1)
            {
                btn_increment_minus51.Enabled = false;
            }
            if (increment_int51 >= 99)
            {
                btn_increment_add51.Enabled = false;
            }

            // pasta
            if (increment_int52 <= 1)
            {
                btn_increment_minus52.Enabled = false;
            }
            if (increment_int52 >= 99)
            {
                btn_increment_add52.Enabled = false;
            }

            if (increment_int53 <= 1)
            {
                btn_increment_minus53.Enabled = false;
            }
            if (increment_int53 >= 99)
            {
                btn_increment_add53.Enabled = false;
            }

            if (increment_int54 <= 1)
            {
                btn_increment_minus54.Enabled = false;
            }
            if (increment_int54 >= 99)
            {
                btn_increment_add54.Enabled = false;
            }

            // sandwich
            if (increment_int55 <= 1)
            {
                btn_increment_minus55.Enabled = false;
            }
            if (increment_int55 >= 99)
            {
                btn_increment_add55.Enabled = false;
            }

            if (increment_int56 <= 1)
            {
                btn_increment_minus56.Enabled = false;
            }
            if (increment_int56 >= 99)
            {
                btn_increment_add56.Enabled = false;
            }

            if (increment_int57 <= 1)
            {
                btn_increment_minus57.Enabled = false;
            }
            if (increment_int57 >= 99)
            {
                btn_increment_add57.Enabled = false;
            }

            // salad
            if (increment_int58 <= 1)
            {
                btn_increment_minus58.Enabled = false;
            }
            if (increment_int58 >= 99)
            {
                btn_increment_add58.Enabled = false;
            }

            if (increment_int59 <= 1)
            {
                btn_increment_minus59.Enabled = false;
            }
            if (increment_int59 >= 99)
            {
                btn_increment_add59.Enabled = false;
            }

            if (increment_int60 <= 1)
            {
                btn_increment_minus60.Enabled = false;
            }
            if (increment_int60 >= 99)
            {
                btn_increment_add60.Enabled = false;
            }

            // end validation of button increment

            // Increment and decrement buttons
            btn_increment_add1.Click += delegate
            {
                increment_int += 1;
                txtQuantity_1.Text = increment_int.ToString();


                Window.SetFlags(WindowManagerFlags.NotTouchable, 
                    WindowManagerFlags.NotTouchable);

                

                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_1.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;
                                    


                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            
                            if (increment_int >= 2 && increment_int <= 98)
                            {
                                btn_increment_minus1.Enabled = true;
                            }
                            if(increment_int >= 99)
                            {
                                btn_increment_add1.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price1.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus1.Click += delegate
            {
                increment_int -= 1;

                txtQuantity_1.Text = increment_int.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable,
                    WindowManagerFlags.NotTouchable);

                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_1.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            
                            if(increment_int <= 1)
                            {
                                btn_increment_minus1.Enabled = false;
                            }
                            if(increment_int >= 98)
                            {
                                btn_increment_add1.Enabled = true;
                            }

                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price1.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add2.Click += delegate
            {
                increment_int2 += 1;
                txtQuantity_2.Text = increment_int2.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_2.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "2");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 2);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int2 >= 2 && increment_int2 <= 98)
                            {
                                btn_increment_minus2.Enabled = true;
                            }
                            if (increment_int2 >= 99)
                            {
                                btn_increment_add2.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price2.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End

            };

            btn_increment_minus2.Click += delegate
            {
                increment_int2 -= 1;
                txtQuantity_2.Text = increment_int2.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);

                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_2.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "2");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 2);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int2 <= 1)
                            {
                                btn_increment_minus2.Enabled = false;
                            }
                            if (increment_int2 >= 98)
                            {
                                btn_increment_add2.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price2.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };
            
            btn_increment_add3.Click += delegate
            {
                increment_int3 += 1;
                txtQuantity_3.Text = increment_int3.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                try
                    {
                        
                            conn.Open();
                        
                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_3.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "3");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 3);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {
                           
                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();
                                
                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {
                               
                                while (myReader.Read())
                                {
                                    
                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;
                                    
                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";
                                    

                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }
                        
                        this.RunOnUiThread(() =>
                        {
                            if (increment_int3 >= 2 && increment_int3 <= 98)
                            {
                                btn_increment_minus3.Enabled = true;
                            }
                            if (increment_int3 >= 99)
                            {
                                btn_increment_add3.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price3.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });
                        
                        // end subtotal reader
                        conn.Close();
                    }
                catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                finally
                    {
                        conn.Close();
                    }

                   
                })).Start();
                //Thread End
            };
            
            btn_increment_minus3.Click += delegate
            {
                increment_int3 -= 1;
                txtQuantity_3.Text = increment_int3.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_3.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "3");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 3);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int3 <= 1)
                            {
                                btn_increment_minus3.Enabled = false;
                            }
                            if (increment_int3 >= 98)
                            {
                                btn_increment_add3.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price3.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add4.Click += delegate
            {
                increment_int4 += 1;
                txtQuantity_4.Text = increment_int4.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_4.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "4");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 4);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int4 >= 2 && increment_int4 <= 98)
                            {
                                btn_increment_minus4.Enabled = true;
                            }
                            if (increment_int4 >= 99)
                            {
                                btn_increment_add4.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price4.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus4.Click += delegate
            {
                increment_int4 -= 1;
                txtQuantity_4.Text = increment_int4.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_4.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "4");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 4);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int4 <= 1)
                            {
                                btn_increment_minus4.Enabled = false;
                            }
                            if (increment_int4 >= 98)
                            {
                                btn_increment_add4.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price4.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add5.Click += delegate
            {
                increment_int5 += 1;
                txtQuantity_5.Text = increment_int5.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_5.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "5");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 5);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int5 >= 2 && increment_int5 <= 98)
                            {
                                btn_increment_minus5.Enabled = true;
                            }
                            if (increment_int5 >= 99)
                            {
                                btn_increment_add5.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price5.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus5.Click += delegate
            {
                increment_int5 -= 1;
                txtQuantity_5.Text = increment_int5.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_5.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "5");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 5);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int5 <= 1)
                            {
                                btn_increment_minus5.Enabled = false;
                            }
                            if (increment_int5 >= 98)
                            {
                                btn_increment_add5.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price5.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add6.Click += delegate
            {
                increment_int6 += 1;
                txtQuantity_6.Text = increment_int6.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_6.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "6");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 6);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int6 >= 2 && increment_int6 <= 98)
                            {
                                btn_increment_minus6.Enabled = true;
                            }
                            if (increment_int6 >= 99)
                            {
                                btn_increment_add6.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price6.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus6.Click += delegate
            {
                increment_int6 -= 1;
                txtQuantity_6.Text = increment_int6.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_6.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "6");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 6);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int6 <= 1)
                            {
                                btn_increment_minus6.Enabled = false;
                            }
                            if (increment_int6 >= 98)
                            {
                                btn_increment_add6.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price6.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add7.Click += delegate
            {
                increment_int7 += 1;
                txtQuantity_7.Text = increment_int7.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_7.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "7");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 7);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int7 >= 2 && increment_int7 <= 98)
                            {
                                btn_increment_minus7.Enabled = true;
                            }
                            if (increment_int7 >= 99)
                            {
                                btn_increment_add7.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price7.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus7.Click += delegate
            {
                increment_int7 -= 1;
                txtQuantity_7.Text = increment_int7.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_7.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "7");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 7);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                           
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int7 <= 1)
                            {
                                btn_increment_minus7.Enabled = false;
                            }
                            if (increment_int7 >= 98)
                            {
                                btn_increment_add7.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price7.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add8.Click += delegate
            {
                increment_int8 += 1;
                txtQuantity_8.Text = increment_int8.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_8.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "8");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 8);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int8 >= 2 && increment_int8 <= 98)
                            {
                                btn_increment_minus8.Enabled = true;
                            }
                            if (increment_int8 >= 99)
                            {
                                btn_increment_add8.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price8.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus8.Click += delegate
            {
                increment_int8 -= 1;
                txtQuantity_8.Text = increment_int8.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_8.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "8");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 8);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int8 <= 1)
                            {
                                btn_increment_minus8.Enabled = false;
                            }
                            if (increment_int8 >= 98)
                            {
                                btn_increment_add8.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price8.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            // EFC CHICKEN CURRY
            btn_increment_add9.Click += delegate
            {
                increment_int9 += 1;
                txtQuantity_9.Text = increment_int9.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_9.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int9 >= 2 && increment_int9 <= 98)
                            {
                                btn_increment_minus9.Enabled = true;
                            }
                            if (increment_int9 >= 99)
                            {
                                btn_increment_add9.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price9.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus9.Click += delegate
            {
                increment_int9 -= 1;
                txtQuantity_9.Text = increment_int9.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_9.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int9 <= 1)
                            {
                                btn_increment_minus9.Enabled = false;
                            }
                            if (increment_int9 >= 98)
                            {
                                btn_increment_add9.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price9.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add10.Click += delegate
            {
                increment_int10 += 1;
                txtQuantity_10.Text = increment_int10.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_10.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "2");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 2);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int10 >= 2 && increment_int10 <= 98)
                            {
                                btn_increment_minus10.Enabled = true;
                            }
                            if (increment_int10 >= 99)
                            {
                                btn_increment_add10.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price10.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus10.Click += delegate
            {
                increment_int10 -= 1;
                txtQuantity_10.Text = increment_int10.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_10.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "2");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 2);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int10 <= 1)
                            {
                                btn_increment_minus10.Enabled = false;
                            }
                            if (increment_int10 >= 98)
                            {
                                btn_increment_add10.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price10.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add11.Click += delegate
            {
                increment_int11 += 1;
                txtQuantity_11.Text = increment_int11.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_11.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "3");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 3);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int11 >= 2 && increment_int11 <= 98)
                            {
                                btn_increment_minus11.Enabled = true;
                            }
                            if (increment_int11 >= 99)
                            {
                                btn_increment_add11.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price11.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus11.Click += delegate
            {
                increment_int11 -= 1;
                txtQuantity_11.Text = increment_int11.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_11.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "3");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 3);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int11 <= 1)
                            {
                                btn_increment_minus11.Enabled = false;
                            }
                            if (increment_int11 >= 98)
                            {
                                btn_increment_add11.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price11.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add12.Click += delegate
            {
                increment_int12 += 1;
                txtQuantity_12.Text = increment_int12.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_12.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "4");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 4);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int12 >= 2 && increment_int12 <= 98)
                            {
                                btn_increment_minus12.Enabled = true;
                            }
                            if (increment_int12 >= 99)
                            {
                                btn_increment_add12.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price12.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus12.Click += delegate
            {
                increment_int12 -= 1;
                txtQuantity_12.Text = increment_int12.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_12.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "4");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 4);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int12 <= 1)
                            {
                                btn_increment_minus12.Enabled = false;
                            }
                            if (increment_int12 >= 98)
                            {
                                btn_increment_add12.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price12.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add12.Click += delegate
            {
                increment_int12 += 1;
                txtQuantity_12.Text = increment_int12.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_12.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "4");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 4);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int12 >= 2 && increment_int12 <= 98)
                            {
                                btn_increment_minus12.Enabled = true;
                            }
                            if (increment_int12 >= 99)
                            {
                                btn_increment_add12.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price12.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus12.Click += delegate
            {
                increment_int12 -= 1;
                txtQuantity_12.Text = increment_int12.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_12.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "4");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 4);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int12 <= 1)
                            {
                                btn_increment_minus12.Enabled = false;
                            }
                            if (increment_int12 >= 98)
                            {
                                btn_increment_add12.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price12.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add13.Click += delegate
            {
                increment_int13 += 1;
                txtQuantity_13.Text = increment_int13.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_13.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "5");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 5);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int13 >= 2 && increment_int13 <= 98)
                            {
                                btn_increment_minus13.Enabled = true;
                            }
                            if (increment_int13 >= 99)
                            {
                                btn_increment_add13.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price13.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus13.Click += delegate
            {
                increment_int13 -= 1;
                txtQuantity_13.Text = increment_int13.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_13.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "5");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 5);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int13 <= 1)
                            {
                                btn_increment_minus13.Enabled = false;
                            }
                            if (increment_int13 >= 98)
                            {
                                btn_increment_add13.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price13.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add14.Click += delegate
            {
                increment_int14 += 1;
                txtQuantity_14.Text = increment_int14.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_14.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "6");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 6);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int14 >= 2 && increment_int14 <= 98)
                            {
                                btn_increment_minus14.Enabled = true;
                            }
                            if (increment_int14 >= 99)
                            {
                                btn_increment_add14.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price14.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus14.Click += delegate
            {
                increment_int14 -= 1;
                txtQuantity_14.Text = increment_int14.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_14.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "6");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 6);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int14 <= 1)
                            {
                                btn_increment_minus14.Enabled = false;
                            }
                            if (increment_int14 >= 98)
                            {
                                btn_increment_add14.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price14.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add15.Click += delegate
            {
                increment_int15 += 1;
                txtQuantity_15.Text = increment_int15.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_15.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "7");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 7);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int15 >= 2 && increment_int15 <= 98)
                            {
                                btn_increment_minus15.Enabled = true;
                            }
                            if (increment_int15 >= 99)
                            {
                                btn_increment_add15.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price15.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus15.Click += delegate
            {
                increment_int15 -= 1;
                txtQuantity_15.Text = increment_int15.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_15.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "7");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 7);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int15 <= 1)
                            {
                                btn_increment_minus15.Enabled = false;
                            }
                            if (increment_int15 >= 98)
                            {
                                btn_increment_add15.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price15.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add16.Click += delegate
            {
                increment_int16 += 1;
                txtQuantity_16.Text = increment_int16.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_16.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "8");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 8);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int16 >= 2 && increment_int16 <= 98)
                            {
                                btn_increment_minus16.Enabled = true;
                            }
                            if (increment_int16 >= 99)
                            {
                                btn_increment_add16.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price16.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus16.Click += delegate
            {
                increment_int16 -= 1;
                txtQuantity_16.Text = increment_int16.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_16.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "8");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 8);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC CHICKEN CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int16 <= 1)
                            {
                                btn_increment_minus16.Enabled = false;
                            }
                            if (increment_int16 >= 98)
                            {
                                btn_increment_add16.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price16.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            
            // EFC BEEF TERIYAKI
            btn_increment_add17.Click += delegate
            {
                increment_int17 += 1;
                txtQuantity_17.Text = increment_int17.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_17.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int17 >= 2 && increment_int17 <= 98)
                            {
                                btn_increment_minus17.Enabled = true;
                            }
                            if (increment_int17 >= 99)
                            {
                                btn_increment_add17.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price17.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus17.Click += delegate
            {
                increment_int17 -= 1;
                txtQuantity_17.Text = increment_int17.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_17.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                           
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int17 <= 1)
                            {
                                btn_increment_minus17.Enabled = false;
                            }
                            if (increment_int17 >= 98)
                            {
                                btn_increment_add17.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price17.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add18.Click += delegate
            {
                increment_int18 += 1;
                txtQuantity_18.Text = increment_int18.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_18.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "2");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 2);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int18 >= 2 && increment_int18 <= 98)
                            {
                                btn_increment_minus18.Enabled = true;
                            }
                            if (increment_int18 >= 99)
                            {
                                btn_increment_add18.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price18.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus18.Click += delegate
            {
                increment_int18 -= 1;
                txtQuantity_18.Text = increment_int18.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_18.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "2");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 2);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int18 <= 1)
                            {
                                btn_increment_minus18.Enabled = false;
                            }
                            if (increment_int18 >= 98)
                            {
                                btn_increment_add18.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price18.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add19.Click += delegate
            {
                increment_int19 += 1;
                txtQuantity_19.Text = increment_int19.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_19.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "3");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 3);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int19 >= 2 && increment_int19 <= 98)
                            {
                                btn_increment_minus19.Enabled = true;
                            }
                            if (increment_int19 >= 99)
                            {
                                btn_increment_add19.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price19.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus19.Click += delegate
            {
                increment_int19 -= 1;
                txtQuantity_19.Text = increment_int19.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_19.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "3");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 3);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int19 <= 1)
                            {
                                btn_increment_minus19.Enabled = false;
                            }
                            if (increment_int19 >= 98)
                            {
                                btn_increment_add19.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price19.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add20.Click += delegate
            {
                increment_int20 += 1;
                txtQuantity_20.Text = increment_int20.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_20.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "4");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 4);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int20 >= 2 && increment_int20 <= 98)
                            {
                                btn_increment_minus20.Enabled = true;
                            }
                            if (increment_int20 >= 99)
                            {
                                btn_increment_add20.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price20.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus20.Click += delegate
            {
                increment_int20 -= 1;
                txtQuantity_20.Text = increment_int20.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_20.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "4");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 4);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int20 <= 1)
                            {
                                btn_increment_minus20.Enabled = false;
                            }
                            if (increment_int20 >= 98)
                            {
                                btn_increment_add20.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price20.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add21.Click += delegate
            {
                increment_int21 += 1;
                txtQuantity_21.Text = increment_int21.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_21.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "5");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 5);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int21 >= 2 && increment_int21 <= 98)
                            {
                                btn_increment_minus21.Enabled = true;
                            }
                            if (increment_int21 >= 99)
                            {
                                btn_increment_add21.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price21.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus21.Click += delegate
            {
                increment_int21 -= 1;
                txtQuantity_21.Text = increment_int21.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_21.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "5");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 5);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int21 <= 1)
                            {
                                btn_increment_minus21.Enabled = false;
                            }
                            if (increment_int21 >= 98)
                            {
                                btn_increment_add21.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price21.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add22.Click += delegate
            {
                increment_int22 += 1;
                txtQuantity_22.Text = increment_int22.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_22.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "6");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 6);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int22 >= 2 && increment_int22 <= 98)
                            {
                                btn_increment_minus22.Enabled = true;
                            }
                            if (increment_int22 >= 99)
                            {
                                btn_increment_add22.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price22.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus22.Click += delegate
            {
                increment_int22 -= 1;
                txtQuantity_22.Text = increment_int22.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_22.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "6");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 6);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int22 <= 1)
                            {
                                btn_increment_minus22.Enabled = false;
                            }
                            if (increment_int22 >= 98)
                            {
                                btn_increment_add22.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price22.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add23.Click += delegate
            {
                increment_int23 += 1;
                txtQuantity_23.Text = increment_int23.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_23.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "7");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 7);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int23 >= 2 && increment_int23 <= 98)
                            {
                                btn_increment_minus23.Enabled = true;
                            }
                            if (increment_int23 >= 99)
                            {
                                btn_increment_add23.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price23.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus23.Click += delegate
            {
                increment_int23 -= 1;
                txtQuantity_23.Text = increment_int23.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_23.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "7");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 7);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int23 <= 1)
                            {
                                btn_increment_minus23.Enabled = false;
                            }
                            if (increment_int23 >= 98)
                            {
                                btn_increment_add23.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price23.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add24.Click += delegate
            {
                increment_int24 += 1;
                txtQuantity_24.Text = increment_int24.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_24.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "8");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 8);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int24 >= 2 && increment_int24 <= 98)
                            {
                                btn_increment_minus24.Enabled = true;
                            }
                            if (increment_int24 >= 99)
                            {
                                btn_increment_add24.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price24.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus24.Click += delegate
            {
                increment_int24 -= 1;
                txtQuantity_24.Text = increment_int24.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_24.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "8");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 8);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF TERIYAKI");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                           
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int24 <= 1)
                            {
                                btn_increment_minus24.Enabled = false;
                            }
                            if (increment_int24 >= 98)
                            {
                                btn_increment_add24.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price24.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            // EFC BEEF CURRY
            btn_increment_add25.Click += delegate
            {
                increment_int25 += 1;
                txtQuantity_25.Text = increment_int25.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_25.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int25 >= 2 && increment_int25 <= 98)
                            {
                                btn_increment_minus25.Enabled = true;
                            }
                            if (increment_int25 >= 99)
                            {
                                btn_increment_add25.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price25.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus25.Click += delegate
            {
                increment_int25 -= 1;
                txtQuantity_25.Text = increment_int25.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_25.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                           
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int25 <= 1)
                            {
                                btn_increment_minus25.Enabled = false;
                            }
                            if (increment_int25 >= 98)
                            {
                                btn_increment_add25.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price25.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add26.Click += delegate
            {
                increment_int26 += 1;
                txtQuantity_26.Text = increment_int26.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_26.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "2");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 2);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int26 >= 2 && increment_int26 <= 98)
                            {
                                btn_increment_minus26.Enabled = true;
                            }
                            if (increment_int26 >= 99)
                            {
                                btn_increment_add26.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price26.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus26.Click += delegate
            {
                increment_int26 -= 1;
                txtQuantity_26.Text = increment_int26.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_26.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "2");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 2);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                           
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int26 <= 1)
                            {
                                btn_increment_minus26.Enabled = false;
                            }
                            if (increment_int26 >= 98)
                            {
                                btn_increment_add26.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price26.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add27.Click += delegate
            {
                increment_int27 += 1;
                txtQuantity_27.Text = increment_int27.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_27.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "3");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 3);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                           
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int27 >= 2 && increment_int27 <= 98)
                            {
                                btn_increment_minus27.Enabled = true;
                            }
                            if (increment_int27 >= 99)
                            {
                                btn_increment_add27.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price27.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus27.Click += delegate
            {
                increment_int27 -= 1;
                txtQuantity_27.Text = increment_int27.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_27.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "3");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 3);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int27 <= 1)
                            {
                                btn_increment_minus27.Enabled = false;
                            }
                            if (increment_int27 >= 98)
                            {
                                btn_increment_add27.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price27.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add28.Click += delegate
            {
                increment_int28 += 1;
                txtQuantity_28.Text = increment_int28.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_28.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "4");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 4);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int28 >= 2 && increment_int28 <= 98)
                            {
                                btn_increment_minus28.Enabled = true;
                            }
                            if (increment_int28 >= 99)
                            {
                                btn_increment_add28.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price28.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus28.Click += delegate
            {
                increment_int28 -= 1;
                txtQuantity_28.Text = increment_int28.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_28.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "4");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 4);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int28 <= 1)
                            {
                                btn_increment_minus28.Enabled = false;
                            }
                            if (increment_int28 >= 98)
                            {
                                btn_increment_add28.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price28.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add29.Click += delegate
            {
                increment_int29 += 1;
                txtQuantity_29.Text = increment_int29.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_29.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "5");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 5);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int29 >= 2 && increment_int29 <= 98)
                            {
                                btn_increment_minus29.Enabled = true;
                            }
                            if (increment_int29 >= 99)
                            {
                                btn_increment_add29.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price29.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus29.Click += delegate
            {
                increment_int29 -= 1;
                txtQuantity_29.Text = increment_int29.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_29.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "5");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 5);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int29 <= 1)
                            {
                                btn_increment_minus29.Enabled = false;
                            }
                            if (increment_int29 >= 98)
                            {
                                btn_increment_add29.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price29.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add30.Click += delegate
            {
                increment_int30 += 1;
                txtQuantity_30.Text = increment_int30.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_30.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "6");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 6);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int30 >= 2 && increment_int30 <= 98)
                            {
                                btn_increment_minus30.Enabled = true;
                            }
                            if (increment_int30 >= 99)
                            {
                                btn_increment_add30.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price30.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus30.Click += delegate
            {
                increment_int30 -= 1;
                txtQuantity_30.Text = increment_int30.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_30.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "6");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 6);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                           
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int30 <= 1)
                            {
                                btn_increment_minus30.Enabled = false;
                            }
                            if (increment_int30 >= 98)
                            {
                                btn_increment_add30.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price30.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add31.Click += delegate
            {
                increment_int31 += 1;
                txtQuantity_31.Text = increment_int31.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_31.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "7");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 7);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int31 >= 2 && increment_int31 <= 98)
                            {
                                btn_increment_minus31.Enabled = true;
                            }
                            if (increment_int31 >= 99)
                            {
                                btn_increment_add31.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price31.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus31.Click += delegate
            {
                increment_int31 -= 1;
                txtQuantity_31.Text = increment_int31.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_31.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "7");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 7);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int31 <= 1)
                            {
                                btn_increment_minus31.Enabled = false;
                            }
                            if (increment_int31 >= 98)
                            {
                                btn_increment_add31.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price31.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add32.Click += delegate
            {
                increment_int32 += 1;
                txtQuantity_32.Text = increment_int32.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_32.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "8");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 8);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int32 >= 2 && increment_int32 <= 98)
                            {
                                btn_increment_minus32.Enabled = true;
                            }
                            if (increment_int32 >= 99)
                            {
                                btn_increment_add32.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price32.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus32.Click += delegate
            {
                increment_int32 -= 1;
                txtQuantity_32.Text = increment_int32.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_32.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "8");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 8);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "EFC BEEF CURRY");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int32 <= 1)
                            {
                                btn_increment_minus32.Enabled = false;
                            }
                            if (increment_int32 >= 98)
                            {
                                btn_increment_add32.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price32.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };


            // The Rest Product
            btn_increment_add33.Click += delegate
            {
                increment_int33 += 1;
                txtQuantity_33.Text = increment_int33.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_33.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHICKEN GRATIN WITH MIX VEGETABLES");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user); 
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHICKEN GRATIN WITH MIX VEGETABLES");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int33 >= 2 && increment_int33 <= 98)
                            {
                                btn_increment_minus33.Enabled = true;
                            }
                            if (increment_int33 >= 99)
                            {
                                btn_increment_add33.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price33.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus33.Click += delegate
            {
                increment_int33 -= 1;
                txtQuantity_33.Text = increment_int33.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_33.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHICKEN GRATIN WITH MIX VEGETABLES");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHICKEN GRATIN WITH MIX VEGETABLES");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int33 <= 1)
                            {
                                btn_increment_minus33.Enabled = false;
                            }
                            if (increment_int33 >= 98)
                            {
                                btn_increment_add33.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price33.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add34.Click += delegate
            {
                increment_int34 += 1;
                txtQuantity_34.Text = increment_int34.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_34.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "ROASTED CHICKEN WITH FUNKY SALAD");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "ROASTED CHICKEN WITH FUNKY SALAD");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int34 >= 2 && increment_int34 <= 98)
                            {
                                btn_increment_minus34.Enabled = true;
                            }
                            if (increment_int34 >= 99)
                            {
                                btn_increment_add34.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price34.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus34.Click += delegate
            {
                increment_int34 -= 1;
                txtQuantity_34.Text = increment_int34.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_34.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "ROASTED CHICKEN WITH FUNKY SALAD");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "ROASTED CHICKEN WITH FUNKY SALAD");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int34 <= 1)
                            {
                                btn_increment_minus34.Enabled = false;
                            }
                            if (increment_int34 >= 98)
                            {
                                btn_increment_add34.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price34.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add35.Click += delegate
            {
                increment_int35 += 1;
                txtQuantity_35.Text = increment_int35.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_35.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHICKEN WITH CARAMELIZED APPLE WITH POTATO WEDGES");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHICKEN WITH CARAMELIZED APPLE WITH POTATO WEDGES");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int35 >= 2 && increment_int35 <= 98)
                            {
                                btn_increment_minus35.Enabled = true;
                            }
                            if (increment_int35 >= 99)
                            {
                                btn_increment_add35.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price35.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus35.Click += delegate
            {
                increment_int35 -= 1;
                txtQuantity_35.Text = increment_int35.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_35.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHICKEN WITH CARAMELIZED APPLE WITH POTATO WEDGES");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHICKEN WITH CARAMELIZED APPLE WITH POTATO WEDGES");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int35 <= 1)
                            {
                                btn_increment_minus35.Enabled = false;
                            }
                            if (increment_int35 >= 98)
                            {
                                btn_increment_add35.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price35.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add36.Click += delegate
            {
                increment_int36 += 1;
                txtQuantity_36.Text = increment_int36.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_36.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "ROSEMARY CHICKEN BREAST WITH SIMPLE PASTA OR MIX");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "ROSEMARY CHICKEN BREAST WITH SIMPLE PASTA OR MIX");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int36 >= 2 && increment_int36 <= 98)
                            {
                                btn_increment_minus36.Enabled = true;
                            }
                            if (increment_int36 >= 99)
                            {
                                btn_increment_add36.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price36.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus36.Click += delegate
            {
                increment_int36 -= 1;
                txtQuantity_36.Text = increment_int36.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_36.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "ROSEMARY CHICKEN BREAST WITH SIMPLE PASTA OR MIX");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "ROSEMARY CHICKEN BREAST WITH SIMPLE PASTA OR MIX");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int36 <= 1)
                            {
                                btn_increment_minus36.Enabled = false;
                            }
                            if (increment_int36 >= 98)
                            {
                                btn_increment_add36.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price36.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add37.Click += delegate
            {
                increment_int37 += 1;
                txtQuantity_37.Text = increment_int37.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_37.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHICKEN TIKKA WITH PAN GRILL BANANA WITH MIX GREENS");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHICKEN TIKKA WITH PAN GRILL BANANA WITH MIX GREENS");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int37 >= 2 && increment_int37 <= 98)
                            {
                                btn_increment_minus37.Enabled = true;
                            }
                            if (increment_int37 >= 99)
                            {
                                btn_increment_add37.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price37.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus37.Click += delegate
            {
                increment_int37 -= 1;
                txtQuantity_37.Text = increment_int37.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_37.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHICKEN TIKKA WITH PAN GRILL BANANA WITH MIX GREENS");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHICKEN TIKKA WITH PAN GRILL BANANA WITH MIX GREENS");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {

                            
                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int37 <= 1)
                            {
                                btn_increment_minus37.Enabled = false;
                            }
                            if (increment_int37 >= 98)
                            {
                                btn_increment_add37.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price37.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            // beef
            btn_increment_add38.Click += delegate
            {
                increment_int38 += 1;
                txtQuantity_38.Text = increment_int38.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_38.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "ARROZ ALA CUBANA WITH GARLIC MUSHROOM SPINACH");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "ARROZ ALA CUBANA WITH GARLIC MUSHROOM SPINACH");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int38 >= 2 && increment_int38 <= 98)
                            {
                                btn_increment_minus38.Enabled = true;
                            }
                            if (increment_int38 >= 99)
                            {
                                btn_increment_add38.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price38.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus38.Click += delegate
            {
                increment_int38 -= 1;
                txtQuantity_38.Text = increment_int38.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_38.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "ARROZ ALA CUBANA WITH GARLIC MUSHROOM SPINACH");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "ARROZ ALA CUBANA WITH GARLIC MUSHROOM SPINACH");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int38 <= 1)
                            {
                                btn_increment_minus38.Enabled = false;
                            }
                            if (increment_int38 >= 98)
                            {
                                btn_increment_add38.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price38.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add39.Click += delegate
            {
                increment_int39 += 1;
                txtQuantity_39.Text = increment_int39.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_39.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "MINT BEEF WITH SALSA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "MINT BEEF WITH SALSA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int39 >= 2 && increment_int39 <= 98)
                            {
                                btn_increment_minus39.Enabled = true;
                            }
                            if (increment_int39 >= 99)
                            {
                                btn_increment_add39.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price39.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus39.Click += delegate
            {
                increment_int39 -= 1;
                txtQuantity_39.Text = increment_int39.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_39.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "MINT BEEF WITH SALSA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "MINT BEEF WITH SALSA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int39 <= 1)
                            {
                                btn_increment_minus39.Enabled = false;
                            }
                            if (increment_int39 >= 98)
                            {
                                btn_increment_add39.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price39.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add40.Click += delegate
            {
                increment_int40 += 1;
                txtQuantity_40.Text = increment_int40.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_40.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "BALSAMIC BEEF WITH ONION CONFIT SERVED WITH MIX GREENS");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "BALSAMIC BEEF WITH ONION CONFIT SERVED WITH MIX GREENS");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int40 >= 2 && increment_int40 <= 98)
                            {
                                btn_increment_minus40.Enabled = true;
                            }
                            if (increment_int40 >= 99)
                            {
                                btn_increment_add40.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price40.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus40.Click += delegate
            {
                increment_int40 -= 1;
                txtQuantity_40.Text = increment_int40.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_40.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "BALSAMIC BEEF WITH ONION CONFIT SERVED WITH MIX GREENS");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "BALSAMIC BEEF WITH ONION CONFIT SERVED WITH MIX GREENS");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int40 <= 1)
                            {
                                btn_increment_minus40.Enabled = false;
                            }
                            if (increment_int40 >= 98)
                            {
                                btn_increment_add40.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price40.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add41.Click += delegate
            {
                increment_int41 += 1;
                txtQuantity_41.Text = increment_int41.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_41.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "MUSTARD BEEF CUTLETS WITH BASIL CREAM SERVED WITH MASHED POTATO");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "MUSTARD BEEF CUTLETS WITH BASIL CREAM SERVED WITH MASHED POTATO");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int41 >= 2 && increment_int41 <= 98)
                            {
                                btn_increment_minus41.Enabled = true;
                            }
                            if (increment_int41 >= 99)
                            {
                                btn_increment_add41.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price41.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus41.Click += delegate
            {
                increment_int41 -= 1;
                txtQuantity_41.Text = increment_int41.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_41.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "MUSTARD BEEF CUTLETS WITH BASIL CREAM SERVED WITH MASHED POTATO");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "MUSTARD BEEF CUTLETS WITH BASIL CREAM SERVED WITH MASHED POTATO");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int41 <= 1)
                            {
                                btn_increment_minus41.Enabled = false;
                            }
                            if (increment_int41 >= 98)
                            {
                                btn_increment_add41.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price41.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add42.Click += delegate
            {
                increment_int42 += 1;
                txtQuantity_42.Text = increment_int42.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_42.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "BEEF WITH CAPSICUM PESTO SERVED WITH MASHED KUMARA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "BEEF WITH CAPSICUM PESTO SERVED WITH MASHED KUMARA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int42 >= 2 && increment_int42 <= 98)
                            {
                                btn_increment_minus42.Enabled = true;
                            }
                            if (increment_int42 >= 99)
                            {
                                btn_increment_add42.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price42.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus42.Click += delegate
            {
                increment_int42 -= 1;
                txtQuantity_42.Text = increment_int42.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_42.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "BEEF WITH CAPSICUM PESTO SERVED WITH MASHED KUMARA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "BEEF WITH CAPSICUM PESTO SERVED WITH MASHED KUMARA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int42 <= 1)
                            {
                                btn_increment_minus42.Enabled = false;
                            }
                            if (increment_int42 >= 98)
                            {
                                btn_increment_add42.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price42.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            // FISH
            btn_increment_add43.Click += delegate
            {
                increment_int43 += 1;
                txtQuantity_43.Text = increment_int43.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_43.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHIMICHURRI FISH WITH RICE AND MIX GREENS");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHIMICHURRI FISH WITH RICE AND MIX GREENS");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int43 >= 2 && increment_int43 <= 98)
                            {
                                btn_increment_minus43.Enabled = true;
                            }
                            if (increment_int43 >= 99)
                            {
                                btn_increment_add43.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price43.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus43.Click += delegate
            {
                increment_int43 -= 1;
                txtQuantity_43.Text = increment_int43.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_43.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHIMICHURRI FISH WITH RICE AND MIX GREENS");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHIMICHURRI FISH WITH RICE AND MIX GREENS");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int43 <= 1)
                            {
                                btn_increment_minus43.Enabled = false;
                            }
                            if (increment_int43 >= 98)
                            {
                                btn_increment_add43.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price43.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add44.Click += delegate
            {
                increment_int44 += 1;
                txtQuantity_44.Text = increment_int44.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_44.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "GINGER FISH DRIZZLED WITH WASABI SERVED WITH BROWN RICE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "GINGER FISH DRIZZLED WITH WASABI SERVED WITH BROWN RICE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int44 >= 2 && increment_int44 <= 98)
                            {
                                btn_increment_minus44.Enabled = true;
                            }
                            if (increment_int44 >= 99)
                            {
                                btn_increment_add44.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price44.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus44.Click += delegate
            {
                increment_int44 -= 1;
                txtQuantity_44.Text = increment_int44.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_44.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "GINGER FISH DRIZZLED WITH WASABI SERVED WITH BROWN RICE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "GINGER FISH DRIZZLED WITH WASABI SERVED WITH BROWN RICE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int44 <= 1)
                            {
                                btn_increment_minus44.Enabled = false;
                            }
                            if (increment_int44 >= 98)
                            {
                                btn_increment_add44.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price44.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add45.Click += delegate
            {
                increment_int45 += 1;
                txtQuantity_45.Text = increment_int45.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_45.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "DILL PESTO TUNA WITH SIMPLE PASTA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "DILL PESTO TUNA WITH SIMPLE PASTA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int45 >= 2 && increment_int45 <= 98)
                            {
                                btn_increment_minus45.Enabled = true;
                            }
                            if (increment_int45 >= 99)
                            {
                                btn_increment_add45.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price45.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus45.Click += delegate
            {
                increment_int45 -= 1;
                txtQuantity_45.Text = increment_int45.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_45.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "DILL PESTO TUNA WITH SIMPLE PASTA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "DILL PESTO TUNA WITH SIMPLE PASTA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int45 <= 1)
                            {
                                btn_increment_minus45.Enabled = false;
                            }
                            if (increment_int45 >= 98)
                            {
                                btn_increment_add45.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price45.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add46.Click += delegate
            {
                increment_int46 += 1;
                txtQuantity_46.Text = increment_int46.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_46.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "YOGURT SALMON WITH SUNDRIED TOMATO SERVED WITH BROWN RICE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "YOGURT SALMON WITH SUNDRIED TOMATO SERVED WITH BROWN RICE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int46 >= 2 && increment_int46 <= 98)
                            {
                                btn_increment_minus46.Enabled = true;
                            }
                            if (increment_int46 >= 99)
                            {
                                btn_increment_add46.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price46.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus46.Click += delegate
            {
                increment_int46 -= 1;
                txtQuantity_46.Text = increment_int46.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_46.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "YOGURT SALMON WITH SUNDRIED TOMATO SERVED WITH BROWN RICE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "YOGURT SALMON WITH SUNDRIED TOMATO SERVED WITH BROWN RICE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int46 <= 1)
                            {
                                btn_increment_minus46.Enabled = false;
                            }
                            if (increment_int46 >= 98)
                            {
                                btn_increment_add46.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price46.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            // VEGAN
            btn_increment_add47.Click += delegate
            {
                increment_int47 += 1;
                txtQuantity_47.Text = increment_int47.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_47.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "BARBECUE CAULIFLOWER WITH MASHED POTATO");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "BARBECUE CAULIFLOWER WITH MASHED POTATO");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int47 >= 2 && increment_int47 <= 98)
                            {
                                btn_increment_minus47.Enabled = true;
                            }
                            if (increment_int47 >= 99)
                            {
                                btn_increment_add47.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price47.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus47.Click += delegate
            {
                increment_int47 -= 1;
                txtQuantity_47.Text = increment_int47.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_47.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "BARBECUE CAULIFLOWER WITH MASHED POTATO");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "BARBECUE CAULIFLOWER WITH MASHED POTATO");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int47 <= 1)
                            {
                                btn_increment_minus47.Enabled = false;
                            }
                            if (increment_int47 >= 98)
                            {
                                btn_increment_add47.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price47.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add48.Click += delegate
            {
                increment_int48 += 1;
                txtQuantity_48.Text = increment_int48.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_48.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "ROASTED SQUASH AND TOFU WITH PUMPKIN PUREE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "ROASTED SQUASH AND TOFU WITH PUMPKIN PUREE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int48 >= 2 && increment_int48 <= 98)
                            {
                                btn_increment_minus48.Enabled = true;
                            }
                            if (increment_int48 >= 99)
                            {
                                btn_increment_add48.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price48.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus48.Click += delegate
            {
                increment_int48 -= 1;
                txtQuantity_48.Text = increment_int48.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_48.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "ROASTED SQUASH AND TOFU WITH PUMPKIN PUREE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "ROASTED SQUASH AND TOFU WITH PUMPKIN PUREE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int48 <= 1)
                            {
                                btn_increment_minus48.Enabled = false;
                            }
                            if (increment_int48 >= 98)
                            {
                                btn_increment_add48.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price48.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add49.Click += delegate
            {
                increment_int49 += 1;
                txtQuantity_49.Text = increment_int49.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_49.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CREAMY VEGAN PENNE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CREAMY VEGAN PENNE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int49 >= 2 && increment_int49 <= 98)
                            {
                                btn_increment_minus49.Enabled = true;
                            }
                            if (increment_int49 >= 99)
                            {
                                btn_increment_add49.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price49.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus49.Click += delegate
            {
                increment_int49 -= 1;
                txtQuantity_49.Text = increment_int49.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_49.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CREAMY VEGAN PENNE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CREAMY VEGAN PENNE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int49 <= 1)
                            {
                                btn_increment_minus49.Enabled = false;
                            }
                            if (increment_int49 >= 98)
                            {
                                btn_increment_add49.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price49.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add50.Click += delegate
            {
                increment_int50 += 1;
                txtQuantity_50.Text = increment_int50.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_50.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "TOFU STEAK WITH MUSHROOM");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "TOFU STEAK WITH MUSHROOM");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int50 >= 2 && increment_int50 <= 98)
                            {
                                btn_increment_minus50.Enabled = true;
                            }
                            if (increment_int50 >= 99)
                            {
                                btn_increment_add50.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price50.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus50.Click += delegate
            {
                increment_int50 -= 1;
                txtQuantity_50.Text = increment_int50.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_50.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "TOFU STEAK WITH MUSHROOM");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "TOFU STEAK WITH MUSHROOM");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int50 <= 1)
                            {
                                btn_increment_minus50.Enabled = false;
                            }
                            if (increment_int50 >= 98)
                            {
                                btn_increment_add50.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price50.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add51.Click += delegate
            {
                increment_int51 += 1;
                txtQuantity_51.Text = increment_int51.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_51.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "LO MEIN PRIMAVERA PASTA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "LO MEIN PRIMAVERA PASTA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int51 >= 2 && increment_int51 <= 98)
                            {
                                btn_increment_minus51.Enabled = true;
                            }
                            if (increment_int51 >= 99)
                            {
                                btn_increment_add51.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price51.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus51.Click += delegate
            {
                increment_int51 -= 1;
                txtQuantity_51.Text = increment_int51.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_51.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "LO MEIN PRIMAVERA PASTA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "LO MEIN PRIMAVERA PASTA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int51 <= 1)
                            {
                                btn_increment_minus51.Enabled = false;
                            }
                            if (increment_int51 >= 98)
                            {
                                btn_increment_add51.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price51.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            // pasta
            btn_increment_add52.Click += delegate
            {
                increment_int52 += 1;
                txtQuantity_52.Text = increment_int52.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_52.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHEESY COLD PASTA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHEESY COLD PASTA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int52 >= 2 && increment_int52 <= 98)
                            {
                                btn_increment_minus52.Enabled = true;
                            }
                            if (increment_int52 >= 99)
                            {
                                btn_increment_add52.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price52.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus52.Click += delegate
            {
                increment_int52 -= 1;
                txtQuantity_52.Text = increment_int52.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_52.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHEESY COLD PASTA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHEESY COLD PASTA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int52 <= 1)
                            {
                                btn_increment_minus52.Enabled = false;
                            }
                            if (increment_int52 >= 98)
                            {
                                btn_increment_add52.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price52.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add53.Click += delegate
            {
                increment_int53 += 1;
                txtQuantity_53.Text = increment_int53.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_53.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "PESTO PASTA WITH CHICKEN BREAST");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "PESTO PASTA WITH CHICKEN BREAST");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int53 >= 2 && increment_int53 <= 98)
                            {
                                btn_increment_minus53.Enabled = true;
                            }
                            if (increment_int53 >= 99)
                            {
                                btn_increment_add53.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price53.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus53.Click += delegate
            {
                increment_int53 -= 1;
                txtQuantity_53.Text = increment_int53.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_53.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "PESTO PASTA WITH CHICKEN BREAST");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "PESTO PASTA WITH CHICKEN BREAST");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int53 <= 1)
                            {
                                btn_increment_minus53.Enabled = false;
                            }
                            if (increment_int53 >= 98)
                            {
                                btn_increment_add53.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price53.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add54.Click += delegate
            {
                increment_int54 += 1;
                txtQuantity_54.Text = increment_int54.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_54.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "SEAFOOD MARINARA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "SEAFOOD MARINARA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int54 >= 2 && increment_int54 <= 98)
                            {
                                btn_increment_minus54.Enabled = true;
                            }
                            if (increment_int54 >= 99)
                            {
                                btn_increment_add54.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price54.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus54.Click += delegate
            {
                increment_int54 -= 1;
                txtQuantity_54.Text = increment_int54.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_54.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "SEAFOOD MARINARA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "SEAFOOD MARINARA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int54 <= 1)
                            {
                                btn_increment_minus54.Enabled = false;
                            }
                            if (increment_int54 >= 98)
                            {
                                btn_increment_add54.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price54.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            // SANDWICH
            btn_increment_add55.Click += delegate
            {
                increment_int55 += 1;
                txtQuantity_55.Text = increment_int55.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_55.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHICKEN PITA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHICKEN PITA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int55 >= 2 && increment_int55 <= 98)
                            {
                                btn_increment_minus55.Enabled = true;
                            }
                            if (increment_int55 >= 99)
                            {
                                btn_increment_add55.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price55.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus55.Click += delegate
            {
                increment_int55 -= 1;
                txtQuantity_55.Text = increment_int55.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_55.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "CHICKEN PITA");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "CHICKEN PITA");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int55 <= 1)
                            {
                                btn_increment_minus55.Enabled = false;
                            }
                            if (increment_int55 >= 98)
                            {
                                btn_increment_add55.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price55.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add56.Click += delegate
            {
                increment_int56 += 1;
                txtQuantity_56.Text = increment_int56.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_56.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "GRILLED VEGGIE SANDWICH");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "GRILLED VEGGIE SANDWICH");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int56 >= 2 && increment_int56 <= 98)
                            {
                                btn_increment_minus56.Enabled = true;
                            }
                            if (increment_int56 >= 99)
                            {
                                btn_increment_add56.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price56.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus56.Click += delegate
            {
                increment_int56 -= 1;
                txtQuantity_56.Text = increment_int56.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_56.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "GRILLED VEGGIE SANDWICH");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "GRILLED VEGGIE SANDWICH");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int56 <= 1)
                            {
                                btn_increment_minus56.Enabled = false;
                            }
                            if (increment_int56 >= 98)
                            {
                                btn_increment_add56.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price56.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add57.Click += delegate
            {
                increment_int57 += 1;
                txtQuantity_57.Text = increment_int57.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_57.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "GRILLED BEEF WITH MOZZARELLA CHEESE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "GRILLED BEEF WITH MOZZARELLA CHEESE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int57 >= 2 && increment_int57 <= 98)
                            {
                                btn_increment_minus57.Enabled = true;
                            }
                            if (increment_int57 >= 99)
                            {
                                btn_increment_add57.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price57.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus57.Click += delegate
            {
                increment_int57 -= 1;
                txtQuantity_57.Text = increment_int57.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_57.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "GRILLED BEEF WITH MOZZARELLA CHEESE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "GRILLED BEEF WITH MOZZARELLA CHEESE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int57 <= 1)
                            {
                                btn_increment_minus57.Enabled = false;
                            }
                            if (increment_int57 >= 98)
                            {
                                btn_increment_add57.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price57.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            // SALAD
            btn_increment_add58.Click += delegate
            {
                increment_int58 += 1;
                txtQuantity_58.Text = increment_int58.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_58.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "FUNKY FRUIT SALAD");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "FUNKY FRUIT SALAD");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int58 >= 2 && increment_int58 <= 98)
                            {
                                btn_increment_minus58.Enabled = true;
                            }
                            if (increment_int58 >= 99)
                            {
                                btn_increment_add58.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price58.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus58.Click += delegate
            {
                increment_int58 -= 1;
                txtQuantity_58.Text = increment_int58.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_58.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "FUNKY FRUIT SALAD");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "FUNKY FRUIT SALAD");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int58 <= 1)
                            {
                                btn_increment_minus58.Enabled = false;
                            }
                            if (increment_int58 >= 98)
                            {
                                btn_increment_add58.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price58.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add59.Click += delegate
            {
                increment_int59 += 1;
                txtQuantity_59.Text = increment_int59.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_59.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "MEDITERESIAN CHICKEN SALAD");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "MEDITERESIAN CHICKEN SALAD");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int59 >= 2 && increment_int59 <= 98)
                            {
                                btn_increment_minus59.Enabled = true;
                            }
                            if (increment_int59 >= 99)
                            {
                                btn_increment_add59.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price59.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus59.Click += delegate
            {
                increment_int59 -= 1;
                txtQuantity_59.Text = increment_int59.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_59.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "MEDITERESIAN CHICKEN SALAD");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "MEDITERESIAN CHICKEN SALAD");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int59 <= 1)
                            {
                                btn_increment_minus59.Enabled = false;
                            }
                            if (increment_int59 >= 98)
                            {
                                btn_increment_add59.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price59.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_add60.Click += delegate
            {
                increment_int60 += 1;
                txtQuantity_60.Text = increment_int60.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price + wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_60.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "SALAD NICOISE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "SALAD NICOISE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int60 >= 2 && increment_int60 <= 98)
                            {
                                btn_increment_minus60.Enabled = true;
                            }
                            if (increment_int60 >= 99)
                            {
                                btn_increment_add60.Enabled = false;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price60.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            btn_increment_minus60.Click += delegate
            {
                increment_int60 -= 1;
                txtQuantity_60.Text = increment_int60.ToString();
                Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                //Thread start
                progressbar.Visibility = ViewStates.Visible;
                int subtotal_db = 0, subtotal_result = 0;
                int total_price = 0, result1 = 0, final_result = 0;
                int base_price = 0;

                new Thread(new ThreadStart(delegate
                {
                    while (progressValue < 100)
                    {
                        progressValue += 10;
                        //circleprogressbar.Progress = progressValue;
                        progressbar.Progress = progressValue;
                        Thread.Sleep(100);
                    }
                    try
                    {

                        conn.Open();

                        //string UpdateProductCart = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                        //   "SET wp_product_cart.quantity = @txtquantity " +
                        //   "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name; " +
                        //   "select (select SUM(price) from wp_product_cart where customer_name = @cust_name_total_price) as total_price," +
                        //   "(select SUM(add_ons_price) from wp_product_cart_add_ons where customer_name = @cust_name_total_price2) as total_add_ons;";

                        //MySqlCommand cmd_update = new MySqlCommand(UpdateProductCart, conn);
                        MySqlCommand cmd_update = conn.CreateCommand();

                        cmd_update.Connection = conn;

                        //Looper.Prepare();
                        // update query using parameter value
                        cmd_update.CommandText = "UPDATE wp_product_cart JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id " +
                           "SET wp_product_cart.quantity = @txtquantity, wp_product_cart.compute_qty_price = wp_product_cart.compute_qty_price - wp_product_cart.price " +
                           "WHERE wp_product_cart_add_ons.key_same_result = @key_result AND wp_product_cart.customer_name = @cust_name AND wp_product_cart.product_name = @prod_name;";
                        cmd_update.Parameters.AddWithValue("@txtquantity", txtQuantity_60.Text);
                        cmd_update.Parameters.AddWithValue("@key_result", "1");
                        cmd_update.Parameters.AddWithValue("@cust_name", session_user);
                        cmd_update.Parameters.AddWithValue("@prod_name", "SALAD NICOISE");
                        cmd_update.ExecuteNonQuery();
                        // end
                        //Looper.Loop();


                        //Looper.Prepare();
                        // select total query parameter value --> this select is to update the total of cart while clicking this method
                        cmd_update.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                            "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price; " +
                            "select * from wp_product_cart INNER JOIN wp_product_cart_add_ons ON wp_product_cart.session_order_id = wp_product_cart_add_ons.session_order_id where wp_product_cart_add_ons.key_same_result = @key_id_price AND wp_product_cart.customer_name = @cust_name_base_price AND wp_product_cart.product_name = @cust_name_base_product;";

                        cmd_update.Parameters.AddWithValue("@cust_name_total_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);

                        cmd_update.Parameters.AddWithValue("@key_id_price", 1);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_price", session_user);
                        cmd_update.Parameters.AddWithValue("@cust_name_base_product", "SALAD NICOISE");
                        using (MySqlDataReader myReader = cmd_update.ExecuteReader())
                        {


                            //total reader
                            while (myReader.Read())
                            {
                                //user1 = myReader["quantity"].ToString();

                                //user1 = myReader["quantity"].ToString();
                                total_price = int.Parse(myReader["total_price"].ToString());
                                //txttitle.Text = user1;

                                result1 = total_price;
                                final_result = result1;

                                //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            } // end total reader

                            //subtotal reader
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    subtotal_db = int.Parse(myReader["subtotal_price"].ToString());
                                    //txttitle.Text = user1;

                                    subtotal_result = subtotal_db;

                                    //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                }
                            }
                            if (myReader.NextResult())
                            {

                                while (myReader.Read())
                                {

                                    //user1 = myReader["quantity"].ToString();
                                    base_price = int.Parse(myReader["compute_qty_price"].ToString());
                                    //txttitle.Text = user1;



                                }
                            }

                        }

                        this.RunOnUiThread(() =>
                        {
                            if (increment_int60 <= 1)
                            {
                                btn_increment_minus60.Enabled = false;
                            }
                            if (increment_int60 >= 98)
                            {
                                btn_increment_add60.Enabled = true;
                            }
                            nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                            subtotal_value.Text = subtotal_result.ToString() + ".00";
                            base_price60.Text = "₱" + base_price.ToString() + ".00";
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;
                            Window.ClearFlags(WindowManagerFlags.NotTouchable);
                        });

                        // end subtotal reader
                        conn.Close();
                    }
                    catch (MySqlException ex)
                    {
                        Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                        except.SetTitle("Connection Timeout");
                        except.SetMessage(ex.ToString());
                        except.SetPositiveButton("Ok", (senderAlert, args) =>
                        {

                            except.Dispose();
                        });
                        except.Show();
                    }
                    finally
                    {
                        conn.Close();
                    }


                })).Start();
                //Thread End
            };

            // End increment/decrement query

            // Delete query
            btndelete1.Click += delegate
            {

                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    progressbar.Visibility = ViewStates.Visible;
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);

                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                            try
                            {
                                conn.Open();
                                //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                                //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                                MySqlCommand cmd_delete = conn.CreateCommand();

                                cmd_delete.Connection = conn;

                                
                                // update query using parameter value
                                cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                                cmd_delete.Parameters.AddWithValue("@key_result", "1");
                                cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                                cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");

                                cmd_delete.ExecuteNonQuery();
                                // end update query using parameter value

                                // select total query parameter value --> this select is to update the total of cart while clicking this method
                                cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                    "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                                cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                                cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                                using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                                {

                                    
                                //total reader
                                
                                    while (myReader.Read())
                                    {
                                        //user1 = myReader["quantity"].ToString();

                                        //user1 = myReader["quantity"].ToString();
                                        total_price = myReader["total_price"].ToString();
                                        //txttitle.Text = user1;

                                        

                                        result1 = total_price;

                                        if(result1 == "")
                                        {
                                        result1 = "0";
                                        }
                                        final_result = result1;

                                        //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                    } // end total reader


                                    //subtotal reader
                                    if (myReader.NextResult())
                                    {

                                        while (myReader.Read())
                                        {

                                            //user1 = myReader["quantity"].ToString();
                                            subtotal_db = myReader["subtotal_price"].ToString();
                                            //txttitle.Text = user1;
                                            if(subtotal_db == "")
                                            {
                                            subtotal_db = "0";
                                            }
                                            subtotal_result = subtotal_db;

                                            //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                        }
                                    }
                                
                                
                                }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear1.Visibility = ViewStates.Gone;
                            });

                            conn.Close();

                                
                            }
                            catch(MySqlException ex)
                            {
                                Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                                except.SetTitle("Connection Timeout");
                                except.SetMessage(ex.ToString());
                                except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                                {

                                    except.Dispose();
                                });
                                except.Show();
                            }
                            finally
                            {
                                conn.Close();
                            }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete2.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;

                            
                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            cmd_delete.Parameters.AddWithValue("@key_result", "2");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear2.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete3.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            cmd_delete.Parameters.AddWithValue("@key_result", "3");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear3.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete4.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            cmd_delete.Parameters.AddWithValue("@key_result", "4");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear4.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete5.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            cmd_delete.Parameters.AddWithValue("@key_result", "5");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear5.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete6.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            cmd_delete.Parameters.AddWithValue("@key_result", "6");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                               
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear6.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete7.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            cmd_delete.Parameters.AddWithValue("@key_result", "7");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear7.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete8.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            cmd_delete.Parameters.AddWithValue("@key_result", "8");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear8.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };


            // EFC CHICKEN CURRY
            btndelete9.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear9.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete10.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            cmd_delete.Parameters.AddWithValue("@key_result", "2");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear10.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete11.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            cmd_delete.Parameters.AddWithValue("@key_result", "3");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear11.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete12.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            cmd_delete.Parameters.AddWithValue("@key_result", "4");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear12.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete13.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //12 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "5");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear13.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete14.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //12 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "6");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear14.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete15.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //13 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "7");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear15.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete16.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //13 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "8");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC CHICKEN CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                               
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear16.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            // EFC BEEF TERIYAKI
            btndelete17.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //13 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                               
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear17.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete18.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //13 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "2");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear18.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete19.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //17 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "3");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                               
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear19.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete20.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //17 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "4");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                               //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear20.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete21.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //17 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "5");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                             
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear21.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete22.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //17 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "6");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear22.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete23.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //17 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "7");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                               
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear23.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete24.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //17 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "8");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF TERIYAKI");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                              
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear24.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            // EFC BEEF CURRY
            btndelete25.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //25 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear25.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete26.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //25 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "2");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear26.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete27.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //25 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "3");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear27.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete28.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //25 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "4");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                               
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear28.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete29.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //25 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "5");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                               
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear29.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete30.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //25 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "6");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                              
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);

                                delete_dialog.Dispose();
                                linear30.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete31.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //25 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "7");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear31.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete32.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //25 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "8");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "EFC BEEF CURRY");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                               
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear32.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };


            // The Rest Product
            btndelete33.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //32 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "CHICKEN GRATIN WITH MIX VEGETABLES");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear33.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete34.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //32 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "ROASTED CHICKEN WITH FUNKY SALAD");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                           
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear34.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete35.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //32 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "CHICKEN WITH CARAMELIZED APPLE WITH POTATO WEDGES");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear35.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete36.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //32 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "ROSEMARY CHICKEN BREAST WITH SIMPLE PASTA OR MIX");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear36.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete37.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //32 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "CHICKEN TIKKA WITH PAN GRILL BANANA WITH MIX GREENS");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {

                                
                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear37.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            // BEEF
            btndelete38.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //37 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "ARROZ ALA CUBANA WITH GARLIC MUSHROOM SPINACH");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear38.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete39.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //37 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "MINT BEEF WITH SALSA");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear39.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete40.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //37 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "BALSAMIC BEEF WITH ONION CONFIT SERVED WITH MIX GREENS");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear40.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete41.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //37 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "MUSTARD BEEF CUTLETS WITH BASIL CREAM SERVED WITH MASHED POTATO");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear41.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete42.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //37 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "BEEF WITH CAPSICUM PESTO SERVED WITH MASHED KUMARA");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear42.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            // FISH
            btndelete43.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //42 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "CHIMICHURRI FISH WITH RICE AND MIX GREENS");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear43.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete44.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //42 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "GINGER FISH DRIZZLED WITH WASABI SERVED WITH BROWN RICE");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear44.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete45.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //42 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "DILL PESTO TUNA WITH SIMPLE PASTA");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear45.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete46.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //42 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "YOGURT SALMON WITH SUNDRIED TOMATO SERVED WITH BROWN RICE");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear46.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            // VEGAN
            btndelete47.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //46 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "BARBECUE CAULIFLOWER WITH MASHED POTATO");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear47.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete48.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //46 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "ROASTED SQUASH AND TOFU WITH PUMPKIN PUREE");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear48.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete49.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //46 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "CREAMY VEGAN PENNE");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear49.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete50.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //46 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "TOFU STEAK WITH MUSHROOM");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear50.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete51.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //46 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "LO MEIN PRIMAVERA PASTA");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear51.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            // pasta
            btndelete52.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //51 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "CHEESY COLD PASTA");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear52.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete53.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //51 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "PESTO PASTA WITH CHICKEN BREAST");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear53.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete54.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //51 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "SEAFOOD MARINARA");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear54.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            // sandwich
            btndelete55.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //54 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "CHICKEN PITA");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear55.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete56.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //54 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "GRILLED VEGGIE SANDWICH");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear56.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete57.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //54 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "GRILLED BEEF WITH MOZZARELLA CHEESE");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear57.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            // SALAD
            btndelete58.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //54 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "FUNKY FRUIT SALAD");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear58.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete59.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //54 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "MEDITERESIAN CHICKEN SALAD");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear59.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            btndelete60.Click += delegate
            {
                string subtotal_db = "", subtotal_result = "";
                string total_price = "", result1 = "", final_result = "";

                Android.Support.V7.App.AlertDialog.Builder delete_dialog = new Android.Support.V7.App.AlertDialog.Builder(this);
                delete_dialog.SetTitle("Remove from cart");
                delete_dialog.SetMessage("Items(s) will be remove from order");
                delete_dialog.SetNegativeButton("Delete", (senderAlert, args) =>
                {
                    Window.SetFlags(WindowManagerFlags.NotTouchable, WindowManagerFlags.NotTouchable);
                    progressbar.Visibility = ViewStates.Visible;
                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }
                        try
                        {
                            conn.Open();
                            //string DeleteProductItem = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";

                            //MySqlCommand cmd_delete = new MySqlCommand(DeleteProductItem, conn);

                            MySqlCommand cmd_delete = conn.CreateCommand();

                            cmd_delete.Connection = conn;


                            // update query using parameter value
                            cmd_delete.CommandText = "delete tb1, tb2 from wp_product_cart tb1 LEFT JOIN wp_product_cart_add_ons tb2 ON tb1.session_order_id = tb2.session_order_id where tb2.key_same_result = @key_result AND tb1.customer_name = @cust_name AND tb1.product_name = @prod_name;";
                            //54 unknown
                            cmd_delete.Parameters.AddWithValue("@key_result", "1");
                            cmd_delete.Parameters.AddWithValue("@cust_name", session_user);
                            cmd_delete.Parameters.AddWithValue("@prod_name", "SALAD NICOISE");

                            cmd_delete.ExecuteNonQuery();
                            // end update query using parameter value

                            // select total query parameter value --> this select is to update the total of cart while clicking this method
                            cmd_delete.CommandText = "select SUM(compute_qty_price) AS total_price from wp_product_cart where customer_name = @cust_name_total_price; " +
                                "select SUM(compute_qty_price) AS subtotal_price from wp_product_cart where customer_name = @cust_name_subtotal_price;";

                            cmd_delete.Parameters.AddWithValue("@cust_name_total_price", session_user);
                            cmd_delete.Parameters.AddWithValue("@cust_name_subtotal_price", session_user);
                            using (MySqlDataReader myReader = cmd_delete.ExecuteReader())
                            {


                                //total reader
                                while (myReader.Read())
                                {
                                    //user1 = myReader["quantity"].ToString();

                                    //user1 = myReader["quantity"].ToString();
                                    total_price = myReader["total_price"].ToString();
                                    //txttitle.Text = user1;

                                    result1 = total_price;
                                    if (result1 == "")
                                    {
                                        result1 = "0";
                                    }
                                    final_result = result1;

                                    //nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                } // end total reader

                                //subtotal reader
                                if (myReader.NextResult())
                                {

                                    while (myReader.Read())
                                    {

                                        //user1 = myReader["quantity"].ToString();
                                        subtotal_db = myReader["subtotal_price"].ToString();
                                        //txttitle.Text = user1;
                                        if (subtotal_db == "")
                                        {
                                            subtotal_db = "0";
                                        }
                                        subtotal_result = subtotal_db;

                                        //subtotal_value.Text = subtotal_result.ToString() + ".00";


                                    }
                                }

                            }

                            this.RunOnUiThread(() =>
                            {
                                nav_bottom_item.SetTitle(final_result.ToString() + ".00");
                                subtotal_value.Text = subtotal_result.ToString() + ".00";
                                progressbar.Visibility = ViewStates.Invisible;
                                //circleprogressbar.Visibility = ViewStates.Invisible;
                                progressValue = 0;
                                Window.ClearFlags(WindowManagerFlags.NotTouchable);
                                delete_dialog.Dispose();
                                linear60.Visibility = ViewStates.Gone;
                            });

                            conn.Close();


                        }
                        catch (MySqlException ex)
                        {
                            Android.Support.V7.App.AlertDialog.Builder except = new Android.Support.V7.App.AlertDialog.Builder(this);
                            except.SetTitle("Connection Timeout");
                            except.SetMessage(ex.ToString());
                            except.SetPositiveButton("Ok", (senderAlert2, args2) =>
                            {

                                except.Dispose();
                            });
                            except.Show();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    })).Start();
                });
                delete_dialog.SetPositiveButton("Cancel", (senderAlert, args) =>
                {
                    delete_dialog.Dispose();
                });
                delete_dialog.Show();

            };

            // End delete query

            // Visibility of recycleview layout

            // EFC CHICKEN TERIYAKI
            if (txtQuantity_1.Text != "")
            {
                linear1.Visibility = ViewStates.Visible;
            }
            else
            {
                linear1.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_2.Text != "")
            {
                linear2.Visibility = ViewStates.Visible;
            }
            else
            {
                linear2.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_3.Text != "")
            {
                linear3.Visibility = ViewStates.Visible;
            }
            else
            {
                linear3.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_4.Text != "")
            {
                linear4.Visibility = ViewStates.Visible;
            }
            else
            {
                linear4.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_5.Text != "")
            {
                linear5.Visibility = ViewStates.Visible;
            }
            else
            {
                linear5.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_6.Text != "")
            {
                linear6.Visibility = ViewStates.Visible;
            }
            else
            {
                linear6.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_7.Text != "")
            {
                linear7.Visibility = ViewStates.Visible;
            }
            else
            {
                linear7.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_8.Text != "")
            {
                linear8.Visibility = ViewStates.Visible;
            }
            else
            {
                linear8.Visibility = ViewStates.Gone;
            }

            // EFC CHICKEN CURRY
            if (txtQuantity_9.Text != "")
            {
                linear9.Visibility = ViewStates.Visible;
            }
            else
            {
                linear9.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_10.Text != "")
            {
                linear10.Visibility = ViewStates.Visible;
            }
            else
            {
                linear10.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_11.Text != "")
            {
                linear11.Visibility = ViewStates.Visible;
            }
            else
            {
                linear11.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_12.Text != "")
            {
                linear12.Visibility = ViewStates.Visible;
            }
            else
            {
                linear12.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_13.Text != "")
            {
                linear13.Visibility = ViewStates.Visible;
            }
            else
            {
                linear13.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_14.Text != "")
            {
                linear14.Visibility = ViewStates.Visible;
            }
            else
            {
                linear14.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_15.Text != "")
            {
                linear15.Visibility = ViewStates.Visible;
            }
            else
            {
                linear15.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_16.Text != "")
            {
                linear16.Visibility = ViewStates.Visible;
            }
            else
            {
                linear16.Visibility = ViewStates.Gone;
            }

            // EFC BEEF TERIYAKI
            if (txtQuantity_17.Text != "")
            {
                linear17.Visibility = ViewStates.Visible;
            }
            else
            {
                linear17.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_18.Text != "")
            {
                linear18.Visibility = ViewStates.Visible;
            }
            else
            {
                linear18.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_19.Text != "")
            {
                linear19.Visibility = ViewStates.Visible;
            }
            else
            {
                linear19.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_20.Text != "")
            {
                linear20.Visibility = ViewStates.Visible;
            }
            else
            {
                linear20.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_21.Text != "")
            {
                linear21.Visibility = ViewStates.Visible;
            }
            else
            {
                linear21.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_22.Text != "")
            {
                linear22.Visibility = ViewStates.Visible;
            }
            else
            {
                linear22.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_23.Text != "")
            {
                linear23.Visibility = ViewStates.Visible;
            }
            else
            {
                linear23.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_24.Text != "")
            {
                linear24.Visibility = ViewStates.Visible;
            }
            else
            {
                linear24.Visibility = ViewStates.Gone;
            }

            // EFC BEEF CURRY
            if (txtQuantity_25.Text != "")
            {
                linear25.Visibility = ViewStates.Visible;
            }
            else
            {
                linear25.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_26.Text != "")
            {
                linear26.Visibility = ViewStates.Visible;
            }
            else
            {
                linear26.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_27.Text != "")
            {
                linear27.Visibility = ViewStates.Visible;
            }
            else
            {
                linear27.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_28.Text != "")
            {
                linear28.Visibility = ViewStates.Visible;
            }
            else
            {
                linear28.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_29.Text != "")
            {
                linear29.Visibility = ViewStates.Visible;
            }
            else
            {
                linear29.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_30.Text != "")
            {
                linear30.Visibility = ViewStates.Visible;
            }
            else
            {
                linear30.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_31.Text != "")
            {
                linear31.Visibility = ViewStates.Visible;
            }
            else
            {
                linear31.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_32.Text != "")
            {
                linear32.Visibility = ViewStates.Visible;
            }
            else
            {
                linear32.Visibility = ViewStates.Gone;
            }


            // The Rest Product
            if (txtQuantity_33.Text != "")
            {
                linear33.Visibility = ViewStates.Visible;
            }
            else
            {
                linear33.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_34.Text != "")
            {
                linear34.Visibility = ViewStates.Visible;
            }
            else
            {
                linear34.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_35.Text != "")
            {
                linear35.Visibility = ViewStates.Visible;
            }
            else
            {
                linear35.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_36.Text != "")
            {
                linear36.Visibility = ViewStates.Visible;
            }
            else
            {
                linear36.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_37.Text != "")
            {
                linear37.Visibility = ViewStates.Visible;
            }
            else
            {
                linear37.Visibility = ViewStates.Gone;
            }

            // BEEF
            if (txtQuantity_38.Text != "")
            {
                linear38.Visibility = ViewStates.Visible;
            }
            else
            {
                linear38.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_39.Text != "")
            {
                linear39.Visibility = ViewStates.Visible;
            }
            else
            {
                linear39.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_40.Text != "")
            {
                linear40.Visibility = ViewStates.Visible;
            }
            else
            {
                linear40.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_41.Text != "")
            {
                linear41.Visibility = ViewStates.Visible;
            }
            else
            {
                linear41.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_42.Text != "")
            {
                linear42.Visibility = ViewStates.Visible;
            }
            else
            {
                linear42.Visibility = ViewStates.Gone;
            }

            // FISH
            if (txtQuantity_43.Text != "")
            {
                linear43.Visibility = ViewStates.Visible;
            }
            else
            {
                linear43.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_44.Text != "")
            {
                linear44.Visibility = ViewStates.Visible;
            }
            else
            {
                linear44.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_45.Text != "")
            {
                linear45.Visibility = ViewStates.Visible;
            }
            else
            {
                linear45.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_46.Text != "")
            {
                linear46.Visibility = ViewStates.Visible;
            }
            else
            {
                linear46.Visibility = ViewStates.Gone;
            }

            // VEGAN
            if (txtQuantity_47.Text != "")
            {
                linear47.Visibility = ViewStates.Visible;
            }
            else
            {
                linear47.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_48.Text != "")
            {
                linear48.Visibility = ViewStates.Visible;
            }
            else
            {
                linear48.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_49.Text != "")
            {
                linear49.Visibility = ViewStates.Visible;
            }
            else
            {
                linear49.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_50.Text != "")
            {
                linear50.Visibility = ViewStates.Visible;
            }
            else
            {
                linear50.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_51.Text != "")
            {
                linear51.Visibility = ViewStates.Visible;
            }
            else
            {
                linear51.Visibility = ViewStates.Gone;
            }

            // pasta
            if (txtQuantity_52.Text != "")
            {
                linear52.Visibility = ViewStates.Visible;
            }
            else
            {
                linear52.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_53.Text != "")
            {
                linear53.Visibility = ViewStates.Visible;
            }
            else
            {
                linear53.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_54.Text != "")
            {
                linear54.Visibility = ViewStates.Visible;
            }
            else
            {
                linear54.Visibility = ViewStates.Gone;
            }

            // sandwich
            if (txtQuantity_55.Text != "")
            {
                linear55.Visibility = ViewStates.Visible;
            }
            else
            {
                linear55.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_56.Text != "")
            {
                linear56.Visibility = ViewStates.Visible;
            }
            else
            {
                linear56.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_57.Text != "")
            {
                linear57.Visibility = ViewStates.Visible;
            }
            else
            {
                linear57.Visibility = ViewStates.Gone;
            }

            // salad
            if (txtQuantity_58.Text != "")
            {
                linear58.Visibility = ViewStates.Visible;
            }
            else
            {
                linear58.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_59.Text != "")
            {
                linear59.Visibility = ViewStates.Visible;
            }
            else
            {
                linear59.Visibility = ViewStates.Gone;
            }

            if (txtQuantity_60.Text != "")
            {
                linear60.Visibility = ViewStates.Visible;
            }
            else
            {
                linear60.Visibility = ViewStates.Gone;
            }

            // End Visibility of recycleview layout


        }

        private void Btm_nav_NavigationItemSelected(object sender, BottomNavigationView.NavigationItemSelectedEventArgs e)
        {
            
            
            switch (e.Item.ItemId)
            {
                
                    case Resource.Id.menu_check_out_nav:

                    progressbar.Visibility = ViewStates.Visible;

                    new Thread(new ThreadStart(delegate
                    {
                        while (progressValue < 100)
                        {
                            progressValue += 10;
                            //circleprogressbar.Progress = progressValue;
                            progressbar.Progress = progressValue;
                            Thread.Sleep(100);
                        }

                        Intent myIntent;
                        myIntent = new Intent(this, typeof(Activity_checkout));
                        
                        this.RunOnUiThread(() => {
                            progressbar.Visibility = ViewStates.Invisible;
                            //circleprogressbar.Visibility = ViewStates.Invisible;
                            progressValue = 0;

                            StartActivityForResult(myIntent, 1);

                        });

                       

                        

                        //Intent asd = new Intent(this, typeof(Activity_checkout));

                        //Finishactivity(index)
                    })).Start();
                    break;
                
            }
            
        }

        protected override void OnActivityResult(int requestCode, [GeneratedEnum] Result resultCode, Intent data)
        {
            base.OnActivityResult(requestCode, resultCode, data);

            //when regester activity retrun data, it will be execute 

            if (requestCode == 1 && resultCode == Result.Ok)
            {
                string result = data.GetStringExtra("result");
                if (result == "Success")
                {
                    Finish();
                }
            }
        }

        //public override bool OnCreateOptionsMenu(IMenu menu)
        //{
        //    MenuInflater.Inflate(Resource.Menu.item_bottom_nav_checkout, menu);
        //    if(menu != null)
        //    {
        //        menu.FindItem(Resource.Id.menu_total).SetTitle("Jayson");

        //    }
        //    return base.OnCreateOptionsMenu(menu);
        //}

        //private void updateMenuTitles()
        //{
        //    IMenuItem menu_item = menu1.FindItem(Resource.Id.menu_total);
        //    menu_item.SetTitle("Jayson");
        //}

        public override bool OnOptionsItemSelected(IMenuItem item)
        {
            switch (item.ItemId)
            {
                case Android.Resource.Id.Home:
                    Finish();
                    return true;

                default:
                    return base.OnOptionsItemSelected(item);
            }

        }
    }
}